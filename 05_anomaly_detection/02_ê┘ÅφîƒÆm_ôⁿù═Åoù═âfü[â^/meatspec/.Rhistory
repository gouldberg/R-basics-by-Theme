ypred <- rowSums(as.matrix(meatspec_s[,1:100]) %*% as.matrix(plsmod$coefficients[,,1:14]))
ypred2 <- predict(plsmod, ncomp = 14)
c(ypred)[1:10]
c(ypred2)[1:10]
meatspec_s[,"fat"]
as.matrix(meatspec_s[,1:100]) %*% as.matrix(plsmod$coefficients[,,1:14])
plot(meatspec_s[,"fat"], ypred, main = "Y:prediction by 15 comps   X:standardized fat")
plot(meatspec_s[,"fat"], ypred, main = "Y:prediction by 14 comps   X:standardized fat")
plot(meatspec_s[,"fat"], ypred2, main = "Y:prediction by 14 comps   X:standardized fat")
names(plsmod)
help(plsr)
plsmod <- plsr(fat ~ ., data = meatspec, ncomp = 50, validation = "CV")
plsmod$loading.weights
plsCV <- RMSEP(plsmod, estimate = "CV")
plot(plsCV, type = "o")
ypred <- rowSums(as.matrix(meatspec[,1:100]) %*% as.matrix(plsmod$coefficients[,,1:14]))
ypred2 <- predict(plsmod, ncomp = 14)
plot(meatspec_s[,"fat"], ypred, main = "Y:prediction by 14 comps   X:standardized fat")
plot(meatspec_s[,"fat"], ypred2, main = "Y:prediction by 14 comps   X:standardized fat")
plot(meatspec[,"fat"], ypred, main = "Y:prediction by 14 comps   X:standardized fat")
plot(meatspec[,"fat"], ypred2, main = "Y:prediction by 14 comps   X:standardized fat")
names(plsmod)
plsmod$Yscores
plsmod <- plsr(fat ~ ., data = meatspec_s, ncomp = 50, validation = "CV")
# check loadings  -->  very small loadings by each component
plsmod$loading.weights
# ----------
# plot root mean square error of prediction
plsCV <- RMSEP(plsmod, estimate = "CV")
plot(plsCV, type = "o")
ypred <- rowSums(as.matrix(meatspec_s[,1:100]) %*% as.matrix(plsmod$coefficients[,,1:14]))
plsmod$yscores
plsmod
names(plsmod)
plsmod$loadings
ypred <- predict(plsmod, ncomp = 14)
plot(meatspec_s[,"fat"], ypred, main = "Y:prediction by 14 comps   X:standardized fat")
coef(plsmod)
coef(plsmod, ncomp = 15)
coef(plsmod, ncomp = 14)
coefplot(plsmod, ncomp = 15, xlab = "Frequency")
ypred
as.numeric(ypred)
N <- nrow(meatspec_s)
sig2 <- sum((as.numeric(ypred) - as.numeric(meatspec_s[,"fat"])^2) / N
sig2 <- sum((as.numeric(ypred) - as.numeric(meatspec_s[,"fat"]))^2) / N
sum((as.numeric(ypred) - as.numeric(meatspec_s[,"fat"]))^2) / N
sig2 <- sum((as.numeric(ypred) - as.numeric(meatspec_s[,"fat"]))^2) / N
a <- (as.numeric(ypred) - as.numeric(meatspec_s[,"fat"])) ^ 2 / sig2
a
y <- as.numeric(meatspec_s[,"fat"])
ypred <- predict(plsmod, ncomp = 14)
plot(y, ypred, main = "Y:prediction by 14 comps   X:standardized fat")
coef(plsmod, ncomp = 14)
coefplot(plsmod, ncomp = 15, xlab = "Frequency")
ypred
y <- as.numeric(meatspec_s[,"fat"])
ypred <- as.numeric(predict(plsmod, ncomp = 14))
plot(y, ypred, main = "Y:prediction by 14 comps   X:standardized fat")
coef(plsmod, ncomp = 14)
coefplot(plsmod, ncomp = 15, xlab = "Frequency")
sig2 <- sum((ypred - y)^2) / N
a <- (ypred - y) ^ 2 / sig2
a
graphics.off()
par(mfrow = c(1,2))
plot(ypred ~ y, xlab = "original", ylab = "pred")
abline(0, 1)
plot(a, xlab = "index", ylab = "anomaly score")
th <- sort(a)[N * (1 - 0.05)]
lines(0:215, rep(th, length(0:215)), col = "red", lty = 2)
graphics.off()
par(mfrow = c(1,1))
( idx <- which(a > th) )
matplot(t(meatspec[idx,1:100]), type = "l", main = "X: 100-channel  Y: anomaly meat samples' fat",
lty = 1, lwd = 2)
( idx <- which(a > th) )
ml <- MASS::fitdistr(y, "gamma")
y
ml <- MASS::fitdistr(y, "gamma")
ml <- MASS::fitdistr(y, "gamma")
hist(y)
ml <- MASS::fitdistr(a, "gamma")
kml <- ml$estimate["shape"]
sml <- 1 / ml$estimate["rate"]
plot(curve(dgamma(a, shape = kml, scale = sml), 30, 170), col = "blue", type = "l")
plot(curve(dgamma(x, shape = kml, scale = sml), 30, 170), col = "blue", type = "l")
plot(curve(dgamma(x, shape = kml, scale = sml), 0, 50), col = "blue", type = "l")
mu <- mean(a)
si <- a^2/length(a)
kmo <- (mu / si)^2
smo <- si^2 / mu
smo
kmo
mu
si <- sum(a^2)/length(a)
kmo <- (mu / si)^2
smo <- si^2 / mu
kmo
smo
ano <- a / smo - (kmo - 1) * log(data$weight / smo)
ano <- a / smo - (kmo - 1) * log(a / smo)
th <- order(a, decreasing = T)[0.01 * N]
th
th2 <- order(a, decreasing = T)[0.01 * N]
th2 <- order(ano, decreasing = T)[0.01 * N]
ano
ml <- MASS::fitdistr(a, "gamma")
kml <- ml$estimate["shape"]
sml <- 1 / ml$estimate["rate"]
graphics.off()
par(mfrow = c(1,1))
plot(curve(dgamma(x, shape = kml, scale = sml), 0, 50), col = "blue", type = "l")
hist(a)
plot(curve(dgamma(x, shape = kml, scale = sml), 0, 20), col = "blue", type = "l")
mu <- mean(a)
si <- sum(a^2)/length(a)
kmo <- (mu / si)^2
smo <- si^2 / mu
smo
kmo
help(rgamma)
qgamma(p = 0.99, shape = kml, sclae = sml)
th2 <- qgamma(p = 0.99, shape = kml, scale = sml)
th2
graphics.off()
par(mfrow = c(1,2))
plot(ypred ~ y, xlab = "original", ylab = "pred")
abline(0, 1)
plot(a, xlab = "index", ylab = "anomaly score")
# now we set threshold at 95% of scores  --> refer to below for fitting gamma distribution
th <- sort(a)[N * (1 - 0.05)]
lines(0:215, rep(th, length(0:215)), col = "red", lty = 2)
lines(0:215, rep(th2, length(0:215)), col = "red", lty = 2)
graphics.off()
par(mfrow = c(1,2))
plot(ypred ~ y, xlab = "original", ylab = "pred")
abline(0, 1)
plot(a, xlab = "index", ylab = "anomaly score")
lines(0:215, rep(th2, length(0:215)), col = "red", lty = 2)
graphics.off()
par(mfrow = c(1,1))
( idx <- which(a > th2) )
matplot(t(meatspec[idx,1:100]), type = "l", main = "X: 100-channel  Y: anomaly meat samples' fat",
lty = 1, lwd = 2)
explvar(plsmod)
round(explvar(plsmod), 3)
round( explvar(plsmod) / cumsum(explvar(plsmod)), 3)
round( cumnsum(explvar(plsmod)) / sum(explvar(plsmod)), 3)
round( cumsum(explvar(plsmod)) / sum(explvar(plsmod)), 3)
help(explvar)
plsCV <- RMSEP(plsmod, estimate = "CV")
plot(plsCV, type = "o")
data(gasoline, package = "pls")
dim(gasoline)
gasoline$octane
dim(gasoline$NIR)
str(gasoline$NIR)
graphics.off()
par(mfrow = c(4,4))
for(i in 1:16) plot(gasoline$octane, gasoline$NIR[,i], pch = 21, main = paste0("Octane vs.", colnames(gasoline$NIR)[i]))
for(i in 17:32) plot(gasoline$octane, gasoline$NIR[,i], pch = 21, main = paste0("Octane vs.", colnames(gasoline$NIR)[i]))
matplot(t(gasoline$NIR), type = "l", main = "X: 100-channel  Y: 215 meat samples' fat")
par(mfrow = c(1,1))
matplot(t(gasoline$NIR), type = "l", main = "X: 100-channel  Y: 215 meat samples' fat")
matplot(t(gasoline$NIR), type = "l", main = "X: NIR  Y: 60 gasoline samples")
corThresh <- 0.9
tooHigh <- caret::findCorrelation(cor(gasoline$NIR), corThresh)
names(meatspec)[tooHigh]
corThresh <- 0.9
tooHigh <- caret::findCorrelation(cor(gasoline$NIR), corThresh)
names(meatspec)[tooHigh]
names(gasoline$NIR)[tooHigh]
tooHigh
gasoline$NIR
colnames(gasoline$NIR)[tooHigh]
gas1 <- plsr(octane ~ NIR, ncomp = 50, data = gasoline, validation = "LOO")
summary(gas1)
plot(RMSEP(gas1), legendpos = "topright")
gas1 <- plsr(octane ~ NIR, ncomp = 20, data = gasoline, validation = "LOO")
summary(gas1)
plot(RMSEP(gas1), legendpos = "topright")
plot(RMSEP(gas1), legendpos = "topright", type = "o")
round( cumsum(explvar(gas1)) / sum(explvar(gasl)), 3)
round( cumsum(explvar(gas1)) / sum(explvar(gas1)), 3)
plsCV <- RMSEP(plsmod, estimate = "LOO")
plot(plsCV, type = "o")
plsCV <- RMSEP(plsmod, estimate = "LOO")
plsCV <- RMSEP(plsmod)
plot(plsCV, type = "o")
plot(plsCV)
plot(plsCV, legend = "topright")
plot(plsCV, legend = "topright", type = "b")
plot(plsCV, legend = "topright", type = "o")
par(mfrow = c(1,1))
plot(gas1, plottype = "coef", ncomp=1:3, legendpos = "bottomleft", labels = "numbers", xlab = "nm")
plot(plsmod, plottype = "coef", ncomp=1:4, legendpos = "bottomleft", labels = "numbers", xlab = "nm")
plot(plsmod, plottype = "coef", ncomp = 1:4, legendpos = "bottomleft", labels = "numbers", xlab = "nm")
plot(plsmod, plottype = "coef", ncomp = 1:4, legendpos = "bottomleft", xlab = "Frequency")
plot(plsmod, plottype = "coef", ncomp = 1:14, legendpos = "bottomleft", xlab = "Frequency")
plot(gas1, plottype = "coef", ncomp=1:13, legendpos = "bottomleft", labels = "numbers", xlab = "nm")
par(mfrow = c(1,1))
plot(gas1, plottype = "correlation", ncomp=1:3, legendpos = "bottomleft", labels = "numbers")
plot(plsmod, plottype = "correlation", ncomp=1:14, legendpos = "bottomleft", labels = "numbers")
plot(plsmod, plottype = "correlation", ncomp=1:3, legendpos = "bottomleft", labels = "numbers")
plot(plsmod, plottype = "correlation", ncomp=1:3, legendpos = "bottomleft", labels = "numbers")
graphics.off()
plot(gas1, ncomp = 13, asp = 1, line = TRUE)
plsCV <- RMSEP(gas1)
plot(plsCV, legend = "topright", type = "o")
y <- as.numeric(gasoline$octane)
ypred <- as.numeric(predict(gasoline$NIR, ncomp = 8))
plot(y, ypred, main = "Y:prediction by 8 comps   X:Octane")
y <- as.numeric(gasoline$octane)
ypred <- as.numeric(predict(gasoline$NIR, ncomp = 8))
graphics.off()
plot(y, ypred, main = "Y:prediction by 8 comps   X:Octane")
y <- as.numeric(gasoline$octane)
ypred <- as.numeric(predict(gasoline$NIR, ncomp = 8))
gasoline$NIR
ypred <- as.numeric(predict(NIR, ncomp = 8))
gasoline$NIR
ypred <- as.numeric(predict(as.data.frame(gasoline$NIR), ncomp = 8))
ypred <- as.numeric(predict(gas1, ncomp = 8))
graphics.off()
plot(y, ypred, main = "Y:prediction by 8 comps   X:Octane")
plot(gas1, ncomp = 13, asp = 1, line = TRUE)
plot(gas1, ncomp = 8, asp = 1, line = TRUE)
y <- as.numeric(meatspec_s[,"fat"])
ypred <- as.numeric(predict(plsmod, ncomp = 14))
plot(y, ypred, main = "Y:prediction by 14 comps   X:standardized fat")
plot(plsmod, ncomp = 14, asp = 1, line = TRUE)
y <- as.numeric(gasoline$octane)
ypred <- as.numeric(predict(gas1, ncomp = 8))
graphics.off()
plot(y, ypred, main = "Y:prediction by 8 comps   X:Octane")
plot(gas1, ncomp = 8, asp = 1, line = TRUE)
par(mfrow = c(1,1))
plot(gas1, plottype = "correlation", ncomp=1:3, legendpos = "bottomleft", labels = "numbers")
plot(gas1, plottype = "correlation", ncomp=1:8, legendpos = "bottomleft", labels = "numbers")
plot(gas1, plottype = "scores", comps = 1:3, labels = "number")
plot(gas1, "loadings", comps = 1:8, legendpos = "topleft")
abline(h = 0)
plot(plsmod, plottype = "scores", comps = 1:14, labels = "number")
plot(plsmod, "loadings", comps = 1:14, legendpos = "topleft")
abline(h = 0)
plot(plsmod, plottype = "scores", comps = 1:4, labels = "number")
N <- length(gasoline$octane)
y <- as.numeric(gasoline$octane)
ypred <- as.numeric(predict(gas1, ncomp = 8))
N <- length(gasoline$octane)
sig2 <- sum((ypred - y)^2) / N
# anomaly scores
a <- (ypred - y) ^ 2 / sig2
# ----------
graphics.off()
par(mfrow = c(1,2))
plot(ypred ~ y, xlab = "original", ylab = "pred")
abline(0, 1)
plot(a, xlab = "index", ylab = "anomaly score")
# now we set threshold at 95% of scores  --> refer to below for fitting gamma distribution
th <- sort(a)[N * (1 - 0.05)]
lines(0:215, rep(th, length(0:215)), col = "red", lty = 2)
lines(0:60, rep(th, length(0:60)), col = "red", lty = 2)
graphics.off()
par(mfrow = c(1,1))
( idx <- which(a > th) )
matplot(t(meatspec[idx,1:100]), type = "l", main = "X: 100-channel  Y: anomaly meat samples' fat",
lty = 1, lwd = 2)
matplot(t(gasoline$NIR[idx,]), type = "l", main = "X: 100-channel  Y: anomaly meat samples' fat",
lty = 1, lwd = 2)
( idx <- which(a > th) )
matplot(t(gasoline$NIR[-idx,]), type = "l", main = "X: 100-channel  Y: not anomaly meat samples' fat",
lty = 1, lwd = 2)
par(mfrow = c(1,2))
matplot(t(gasoline$NIR[idx,]), type = "l", main = "X: 100-channel  Y: anomaly meat samples' fat",
lty = 1, lwd = 2)
matplot(t(gasoline$NIR[-idx,]), type = "l", main = "X: 100-channel  Y: not anomaly meat samples' fat",
lty = 1, lwd = 2)
# ----------
graphics.off()
par(mfrow = c(1,2))
plot(ypred ~ y, xlab = "original", ylab = "pred")
abline(0, 1)
plot(a, xlab = "index", ylab = "anomaly score")
# now we set threshold at 95% of scores  --> refer to below for fitting gamma distribution
th <- sort(a)[N * (1 - 0.05)]
lines(0:60, rep(th, length(0:60)), col = "red", lty = 2)
matplot(t(gasoline$NIR[idx,]), type = "l", main = "X: 100-channel  Y: anomaly meat samples' fat",
lty = 1, lwd = 2)
matplot(t(gasoline$NIR[idx,]), type = "l", main = "X: 100-channel  Y: anomaly meat samples' fat",
lty = 1, lwd = 2, ylim = c(-0.1, 0.6))
ml <- MASS::fitdistr(a, "gamma")
kml <- ml$estimate["shape"]
sml <- 1 / ml$estimate["rate"]
graphics.off()
par(mfrow = c(1,1))
plot(curve(dgamma(x, shape = kml, scale = sml), 0, 20), col = "blue", type = "l")
# 1% percential point
th2 <- qgamma(p = 0.99, shape = kml, scale = sml)
# ----------
graphics.off()
par(mfrow = c(1,2))
plot(ypred ~ y, xlab = "original", ylab = "pred")
abline(0, 1)
plot(a, xlab = "index", ylab = "anomaly score")
plot(a, xlab = "index", ylab = "anomaly score")
lines(0:60, rep(th2, length(0:60)), col = "red", lty = 2)
matplot(t(gasoline$NIR[idx,]), type = "l", main = "X: 100-channel  Y: anomaly meat samples' fat",
lty = 1, lwd = 2)
par(mfrow = c(1,2))
matplot(t(gasoline$NIR[idx,]), type = "l", main = "X: 100-channel  Y: anomaly meat gasoline Octaine",
lty = 1, lwd = 2)
graphics.off()
par(mfrow = c(1,1))
( idx <- which(a > th2) )
matplot(t(gasoline$NIR[idx,]), type = "l", main = "X: 100-channel  Y: anomaly meat gasoline Octaine",
lty = 1, lwd = 2)
graphics.off()
par(mfrow = c(1,1))
( idx <- which(a > th2) )
matplot(t(gasoline$NIR[idx,]), type = "l", main = "X: 100-channel  Y: anomaly meat gasoline Octaine",
lty = 1, lwd = 2)
graphics.off()
par(mfrow = c(1,1))
# 13, 17, 47
( idx <- which(a > th) )
par(mfrow = c(1,2))
matplot(t(gasoline$NIR[idx,]), type = "l", main = "X: 100-channel  Y: anomaly meat gasoline Octaine",
lty = 1, lwd = 2)
matplot(t(gasoline$NIR[-idx,]), type = "l", main = "X: 100-channel  Y: not anomaly gasoline Octane",
lty = 1, lwd = 2)
graphics.off()
par(mfrow = c(1,1))
( idx <- which(a > th2) )
matplot(t(gasoline$NIR[idx,]), type = "l", main = "X: 100-channel  Y: anomaly meat gasoline Octaine",
lty = 1, lwd = 2)
gasoline$NIR[idx,]
matplot(t(gasoline$NIR[idx,]), type = "l", main = "X: 100-channel  Y: anomaly meat gasoline Octaine",
lty = 1, lwd = 2)
matplot(t(gasoline$NIR[c(idx,1),]), type = "l", main = "X: 100-channel  Y: anomaly meat gasoline Octaine",
lty = 1, lwd = 2)
matplot(t(gasoline$NIR[idx,]), type = "l", main = "X: NIR  Y: anomaly meat gasoline Octaine",
lty = 1, lwd = 2)
matplot(t(gasoline$NIR), type = "l", main = "X: NIR  Y: 60 gasoline samples")
dim(gasoline$NIR)
matplot(t(gasoline$NIR), type = "l", main = "X: diffuse reflectance measurements (401 type)  Y: NIR spectra for 60 gasoline samples")
gasoline$octane
graphics.off()
par(mfrow = c(2,1))
hist(gasoline$octane, main = "octane numer for 60 gasoline samples")
matplot(t(gasoline$NIR), type = "l", main = "X: diffuse reflectance measurements (401 type)  Y: NIR spectra for 60 gasoline samples")
graphics.off()
par(mfrow = c(1,2))
hist(gasoline$octane, main = "octane numer for 60 gasoline samples")
matplot(t(gasoline$NIR), type = "l", main = "X: diffuse reflectance measurements (401 type)  Y: NIR spectra for 60 gasoline samples")
par(mfrow = c(2,1))
hist(gasoline$octane, main = "octane numer for 60 gasoline samples")
matplot(t(gasoline$NIR), type = "l", main = "X: diffuse reflectance measurements (401 type)  Y: NIR spectra for 60 gasoline samples")
hist(gasoline$octane, main = "distribution of octane numer for 60 gasoline samples")
matplot(t(gasoline$NIR), type = "l", main = "X: diffuse reflectance measurements (401 type)  Y: NIR spectra for 60 gasoline samples")
# plot Octane vs. NIR measurement
graphics.off()
par(mfrow = c(4,4))
for(i in 1:16) plot(gasoline$octane, gasoline$NIR[,i], pch = 21, main = paste0("Octane vs.", colnames(gasoline$NIR)[i]))
for(i in 17:32) plot(gasoline$octane, gasoline$NIR[,i], pch = 21, main = paste0("Octane vs.", colnames(gasoline$NIR)[i]))
library(pls)
# ----------
# 20 components and leave-one-out (LOO) cross validation
gas1 <- plsr(octane ~ NIR, ncomp = 20, data = gasoline, validation = "LOO")
summary(gas1)
# -->
# RMSEP:  Root Mean Squared Error of Prediction
# two cross-validation estimates:
#  - CV is the ordinary CV estimate, and adjCV is a bias-corrected CV estimate
#  - For a LOO CV, there is virtually no difference
# explained variance:  first component explains 71.1%  --> 4 comps achieves 100%
round( cumsum(explvar(gas1)) / sum(explvar(gas1)), 3)
# ----------
# plot root mean square error of prediction
plsCV <- RMSEP(gas1)
plot(plsCV, legend = "topright", type = "o")
par(mfrow = c(1,1))
plsCV <- RMSEP(gas1)
plot(plsCV, legend = "topright", type = "o")
y <- as.numeric(gasoline$octane)
ypred <- as.numeric(predict(gas1, ncomp = 8))
graphics.off()
plot(y, ypred, main = "Y:prediction by 8 comps   X:Octane")
plot(gas1, ncomp = 8, asp = 1, line = TRUE)
par(mfrow = c(1,1))
plot(gas1, plottype = "coef", ncomp=1:13, legendpos = "bottomleft", labels = "numbers", xlab = "nm")
plot(gas1, plottype = "coef", ncomp=1:13, legendpos = "bottomleft", labels = "numbers", xlab = "nm")
plot(gas1, plottype = "coef", ncomp=1:13, legendpos = "topright", labels = "numbers", xlab = "nm")
plot(gas1, plottype = "coef", ncomp=1:13, legendpos = "topleft", labels = "numbers", xlab = "nm")
plot(gas1, plottype = "coef", ncomp=1:13, legendpos = "topleft", labels = "numbers", xlab = "nm",
main = "coefficient for Octane number by each NIR spectra measurement")
plot(gas1, plottype = "correlation", ncomp=1:8, legendpos = "bottomleft", labels = "numbers")
plot(gas1, plottype = "scores", comps = 1:3, labels = "number")
# loading plot
plot(gas1, "loadings", comps = 1:8, legendpos = "topleft")
abline(h = 0)
N <- length(gasoline$octane)
sig2 <- sum((ypred - y)^2) / N
# anomaly scores
a <- (ypred - y) ^ 2 / sig2
# ----------
graphics.off()
par(mfrow = c(1,2))
plot(ypred ~ y, xlab = "original", ylab = "pred")
abline(0, 1)
plot(a, xlab = "index", ylab = "anomaly score")
# now we set threshold at 95% of scores  --> refer to below for fitting gamma distribution
th <- sort(a)[N * (1 - 0.05)]
lines(0:60, rep(th, length(0:60)), col = "red", lty = 2)
gasoline$octane
gasoline$NIR
matplot(t(gasoline$NIR[idx,]), type = "l", main = "X: diffuse reflectance measurements (401 type)  Y: NIR spectra for anomaly samples"
lty = 1, lwd = 2)
matplot(t(gasoline$NIR[idx,]), type = "l", main = "X: diffuse reflectance measurements (401 type)  Y: NIR spectra for anomaly samples",
lty = 1, lwd = 2)
( idx <- which(a > th) )
par(mfrow = c(1,1))
matplot(t(gasoline$NIR[idx,]), type = "l", main = "X: diffuse reflectance measurements (401 type)  Y: NIR spectra for anomaly samples",
lty = 1, lwd = 2)
plot(gasoline$octane, type = "h")
colorcode <- rep(0, length(gasoline$octane))
colorcode[idx] <- 2
plot(gasoline$octane, type = "h", col = colorcode)
colorcode <- rep(1, length(gasoline$octane))
colorcode[idx] <- 3
plot(gasoline$octane, type = "h", col = colorcode)
barplot(gasoline$octane, type = "h", col = colorcode)
barplot(gasoline$octane, horiz = TRUE, col = colorcode)
barplot(gasoline$octane, horiz = TRUE, col = colorcode)
summary(gasoline$octane)
colorcode <- rep(3, length(gasoline$octane))
colorcode[idx] <- 1
par(mfrow = c(1,2))
matplot(t(gasoline$NIR[idx,]), type = "l", main = "X: diffuse reflectance measurements (401 type)  Y: NIR spectra for anomaly samples",
lty = 1, lwd = 2)
barplot(gasoline$octane, horiz = TRUE, col = colorcode)
barplot(gasoline$octane, horiz = TRUE, col = colorcode, ylim = c(80, 85))
barplot(gasoline$octane, horiz = TRUE, col = colorcode, xlim = c(80, 85))
par(mfrow = c(1,2))
matplot(t(gasoline$NIR[idx,]), type = "l", main = "X: diffuse reflectance measurements (401 type)  Y: NIR spectra for anomaly samples",
lty = 1, lwd = 2)
barplot(gasoline$octane, horiz = TRUE, col = colorcode, xlim = c(80, 85))
barplot(gasoline$octane, horiz = TRUE, col = colorcode, xlim = c(83, 87))
graphics.off()
# 13, 17, 47
( idx <- which(a > th) )
colorcode <- rep(3, length(gasoline$octane))
colorcode[idx] <- 1
par(mfrow = c(1,2))
matplot(t(gasoline$NIR[idx,]), type = "l", main = "X: diffuse reflectance measurements (401 type)  Y: NIR spectra for anomaly samples",
lty = 1, lwd = 2)
barplot(gasoline$octane, horiz = TRUE, col = colorcode, xlim = c(83, 87))
barplot(gasoline$octane, horiz = TRUE, col = colorcode, xlim = c(83, 90))
# ----------
graphics.off()
# 13, 17, 47
( idx <- which(a > th) )
colorcode <- rep(3, length(gasoline$octane))
colorcode[idx] <- 1
par(mfrow = c(1,2))
matplot(t(gasoline$NIR[idx,]), type = "l", main = "X: diffuse reflectance measurements (401 type)  Y: NIR spectra for anomaly samples",
lty = 1, lwd = 2)
barplot(gasoline$octane, horiz = TRUE, col = colorcode, xlim = c(83, 90))
th <- sort(a)[N * (1 - 0.05)]
lines(0:60, rep(th, length(0:60)), col = "red", lty = 2)
plot(ypred ~ y, xlab = "original", ylab = "pred")
abline(0, 1)
plot(a, xlab = "index", ylab = "anomaly score")
# now we set threshold at 95% of scores  --> refer to below for fitting gamma distribution
th <- sort(a)[N * (1 - 0.05)]
lines(0:60, rep(th, length(0:60)), col = "red", lty = 2)
ml <- MASS::fitdistr(a, "gamma")
kml <- ml$estimate["shape"]
sml <- 1 / ml$estimate["rate"]
graphics.off()
par(mfrow = c(1,1))
plot(curve(dgamma(x, shape = kml, scale = sml), 0, 20), col = "blue", type = "l")
# ----------
# anomaly score
# 1% percential point
th2 <- qgamma(p = 0.99, shape = kml, scale = sml)
# ----------
graphics.off()
par(mfrow = c(1,2))
plot(ypred ~ y, xlab = "original", ylab = "pred")
abline(0, 1)
plot(a, xlab = "index", ylab = "anomaly score")
lines(0:60, rep(th2, length(0:60)), col = "red", lty = 2)
( idx <- which(a > th2) )
colorcode <- rep(3, length(gasoline$octane))
colorcode[idx] <- 1
par(mfrow = c(1,2))
matplot(t(gasoline$NIR[idx,]), type = "l", main = "X: diffuse reflectance measurements (401 type)  Y: NIR spectra for anomaly samples",
lty = 1, lwd = 2)
barplot(gasoline$octane, horiz = TRUE, col = colorcode, xlim = c(83, 90))
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\00_basics\\05_anomaly_detection\\02_異常検知_入力出力データ\\meatspec")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  meatspec
# ------------------------------------------------------------------------------
# data(meatspec, package="faraway")
meatspec <- read.csv("meatspec.txt", header = T, sep = "\t")
names(meatspec)
# 100-channel spectrum of absorbances for 215 meat samples
dim(meatspec)
