sig1 <- svd(t(U1) %*% U2)$d[1]
# scores
score[t] <- 1 - sig1 ^ 2
}
# ----------
graphics.off()
par(mfrow = c(2,1))
rng <- c(1260, 1340)
plot(xi, type = "l", main = "original series", ylim = c(4, 6))
abline(v = rng, lty = 2, col = "red")
plot(score, type = "l", lty = 1, col = "blue", main = "degree of change")
abline(v = rng, lty = 2, col = "red")
xi <- data[3001:6000, 3]
# ----------
# try 50 and 25
w <- 50
# w <- 25
m <- 2
k <- w/2
L <- k/2
Tt <- length(xi)
# ----------
score <- rep(0, Tt)
for(t in (w + k):(Tt - L + 1)){
# -----------
# left matrix
tstart <- t - w - k + 1
tend <- t - 1
X1 <- t(embed(xi[tstart:tend], w))
# reverse time
X1 <- X1[w:1,]
# -----------
# right matrix
tstart <- t - w - k + 1
tend <- t - 1 + L
X2 <- t(embed(xi[tstart:tend], w))
X2 <- X2[w:1,]
# ----------
U1 <- svd(X1)$u[,1:m]
U2 <- svd(X2)$u[,1:m]
# degree of overwrapping of subspaces
sig1 <- svd(t(U1) %*% U2)$d[1]
# scores
score[t] <- 1 - sig1 ^ 2
}
# ----------
graphics.off()
par(mfrow = c(2,1))
graphics.off()
par(mfrow = c(2,1))
rng <- c(1260, 1340)
plot(xi, type = "l", main = "original series", ylim = c(4, 6))
abline(v = rng, lty = 2, col = "red")
plot(score, type = "l", lty = 1, col = "blue", main = "degree of change")
abline(v = rng, lty = 2, col = "red")
plot(xi, type = "l", main = "original series", ylim = c(0, 10))
abline(v = rng, lty = 2, col = "red")
plot(score, type = "l", lty = 1, col = "blue", main = "degree of change")
abline(v = rng, lty = 2, col = "red")
set.seed(1)
tt <- 0.1
x1 <- seq(0, 10, by = tt)
x2 <- seq(10.1, 20, by = tt)
x3 <- seq(20.2, 30, by = tt)
y1 <- sin(pi * x1) + rnorm(length(x1), sd = 0.07)
y2 <- sin(2 * pi * x2) + rnorm(length(x2), sd = 0.07)
y3 <- sin(pi * x3) + rnorm(length(x3), sd = 0.07)
xi <- c(y1, y2, y3)
# ----------
par(mfrow = c(1,1))
plot(xi, type = "l")
# ------------------------------------------------------------------------------
# Change Point Detection by Singular Spectral Analysis
# ------------------------------------------------------------------------------
w <- 10
m <- 2
k <- 10
L <- k/2
Tt <- length(xi)
# ----------
score <- rep(0, Tt)
for(t in (w + k):(Tt - L + 1)){
# -----------
# left matrix
tstart <- t - w - k + 1
tend <- t - 1
X1 <- t(embed(xi[tstart:tend], w))
# reverse time
X1 <- X1[w:1,]
# -----------
# right matrix
tstart <- t - w - k + 1
tend <- t - 1 + L
X2 <- t(embed(xi[tstart:tend], w))
X2 <- X2[w:1,]
# ----------
U1 <- svd(X1)$u[,1:m]
U2 <- svd(X2)$u[,1:m]
# degree of overwrapping of subspaces
sig1 <- svd(t(U1) %*% U2)$d[1]
# scores
score[t] <- 1 - sig1 ^ 2
}
# ----------
graphics.off()
par(mfrow = c(2,1))
rng <- c(100, 107, 115, 202, 208, 215)
plot(xi, type = "l", main = "original series")
abline(v = rng, lty = 2, col = "red")
plot(score, type = "l", lty = 1, col = "blue", main = "degree of change")
abline(v = rng, lty = 2, col = "red")
set.seed(1)
tt <- 0.1
x1 <- seq(0, 10, by = tt)
x2 <- seq(10.1, 20, by = tt)
x3 <- seq(20.2, 30, by = tt)
y1 <- sin(pi * x1) + rnorm(length(x1), sd = 0.07)
y2 <- sin(2 * pi * x2) + rnorm(length(x2), sd = 0.07)
y3 <- sin(pi * x3) + rnorm(length(x3), sd = 0.07)
xi <- c(y1, y2, y3)
# ----------
par(mfrow = c(1,1))
plot(xi, type = "l")
# ------------------------------------------------------------------------------
# Decompose time series to stationary subintervals and estimate local spectrum
# ------------------------------------------------------------------------------
library(TSSS)
library(timsac)
# ns0:  basic local span
# Note that when setting large max.order, first data points corresponding to those lags are ignored.
# (for example: change max.order = 10 to 20)
output <- TSSS::lsar(x1, max.arorder = 10, ns0 = 50)
output2 <- timsac::mlocar(x1, max.order = 10, span = 50, plot = FALSE)
# ----------
# start and end point  -->  should see timsac::mlocar output !!
output2$init
output2$end
unique(output2$init)
# ----------
graphics.off()
par(mfrow = c(1,1))
# use timsac::mlocar output !!
plot(xi, type = "l")
abline(v = unique(output2$init), col = "blue", lwd = 1)
x1$date <- seq.Date(from = as.Date('1900-01-01'), to = as.Date('2020-10-31'), by = 'days')[1:nrow(xi)]
x1$date <- seq.Date(from = as.Date('1900-01-01'), to = as.Date('2020-10-31'), by = 'days')[1:length(xi)]
xi <- data.frame(x1)
x1$date <- seq.Date(from = as.Date('1900-01-01'), to = as.Date('2020-10-31'), by = 'days')[1:length(xi)]
xi <- c(y1, y2, y3)
# ----------
par(mfrow = c(1,1))
plot(xi, type = "l")
# ----------
# add date variable
xi <- data.frame(xi)
x1$date <- seq.Date(from = as.Date('1900-01-01'), to = as.Date('2020-10-31'), by = 'days')[1:length(xi)]
xi <- c(y1, y2, y3)
# ----------
par(mfrow = c(1,1))
plot(xi, type = "l")
# ----------
# add date variable
xi <- data.frame(xi)
xi$date <- seq.Date(from = as.Date('1900-01-01'), to = as.Date('2020-10-31'), by = 'days')[1:length(xi)]
xi <- xi %>% dplyr::select(date, xi)
ano <- AnomalyDetectionTs(xi, direction = "pos", plot = FALSE)
xi <- data.frame(xi)
xi$date <- seq.Date(from = as.Date('1900-01-01'), to = as.Date('2020-10-31'), by = 'days')[1:length(xi)]
xi <- xi %>% dplyr::select(date, xi)
xi <- c(y1, y2, y3)
# ----------
par(mfrow = c(1,1))
plot(xi, type = "l")
# ----------
# add date variable
xi <- data.frame(xi)
xi$date <- seq.Date(from = as.Date('1900-01-01'), to = as.Date('2020-10-31'), by = 'days')[1:length(xi)]
xi
length(xi)
xi <- c(y1, y2, y3)
# ----------
par(mfrow = c(1,1))
plot(xi, type = "l")
# ----------
# add date variable
xi <- data.frame(xi)
xi$date <- seq.Date(from = as.Date('1900-01-01'), to = as.Date('2020-10-31'), by = 'days')[1:nrow(xi)]
xi <- xi %>% dplyr::select(date, xi)
xi
ano <- AnomalyDetectionTs(xi, direction = "pos", plot = FALSE)
dat2 <- xi %>% dplyr::select(date, xi)
ano <- AnomalyDetectionTs(dat2, direction = "pos", plot = FALSE)
ano$anoms
idx <- which(substring(dat2$date,1,10) %in% substring(ano$anoms$timestamp,1,10))
# ----------
graphics.off()
par(mfrow = c(1,1))
plot(c(dat2$views), type = "l", main = "original validation series")
abline(v = idx, col = "blue", lty = 1)
ano <- AnomalyDetectionTs(dat2, direction = "pos", plot = FALSE)
ano$anoms
idx <- which(substring(dat2$date,1,10) %in% substring(ano$anoms$timestamp,1,10))
idx
plot(xi, type = "l")
xi <- data.frame(xi)
xi$date <- seq.Date(from = as.Date('1900-01-01'), to = as.Date('2020-10-31'), by = 'days')[1:nrow(xi)]
dat2 <- xi %>% dplyr::select(date, xi)
ano <- AnomalyDetectionTs(dat2, direction = "both", plot = FALSE)
ano$anoms
data(gasoline, package = "pls")
dim(gasoline)
gasoline$octane
str(gasoline$NIR)
library(pls)
gasoline$octane
dim(gasoline)
str(gasoline$NIR)
gasoline$octane
gasoline
dim(gasoline)
str(gasoline$NIR)
gasoline$octane
str(gasoline$NIR)
names(gasoline$NIR)
dim(gasoline$NIR)
plot(gasoline$octane, gasoline$NIR[,1])
str(gasoline$NIR)
graphics.off()
par(mfrow = c(4,4))
# Octane vs. 900mm NIR
for(i in 1:10) plot(gasoline$octane, gasoline$NIR[,i], pch = 21)
names(gasoline$NIR)
colnames(gasoline$NIR)
for(i in 1:10) plot(gasoline$octane, gasoline$NIR[,i], pch = 21, main = paste0("Octane vs.", colnames(gasoline$NIR)[i]))
graphics.off()
par(mfrow = c(4,4))
# Octane vs. 900mm NIR
for(i in 1:10) plot(gasoline$octane, gasoline$NIR[,i], pch = 21, main = paste0("Octane vs.", colnames(gasoline$NIR)[i]))
graphics.off()
graphics.off()
par(mfrow = c(4,4))
for(i in 1:10) plot(gasoline$octane, gasoline$NIR[,i], pch = 21, main = paste0("Octane vs.", colnames(gasoline$NIR)[i]))
graphics.off()
par(mfrow = c(4,4))
for(i in 1:16) plot(gasoline$octane, gasoline$NIR[,i], pch = 21, main = paste0("Octane vs.", colnames(gasoline$NIR)[i]))
# ------------------------------------------------------------------------------
# partial least squares regression
# ------------------------------------------------------------------------------
library(pls)
# split data for train and test
gasTrain <- gasoline[1:50,]
gasTest <- gasoline[51:60,]
# ----------
# 10 components and leave-one-out (LOO) cross validation
gas1 <- plsr(octane ~ NIR, ncomp = 10, data = gasTrain, validation = "LOO")
summary(gas1)
# -->
# RMSEP:  Root Mean Squared Error of Prediction
# two cross-validation estimates:
#  - CV is the ordinary CV estimate, and adjCV is a bias-corrected CV estimate
#  - For a LOO CV, there is virtually no difference
graphics.off()
par(mfrow = c(4,4))
for(i in 1:16) plot(gasoline$octane, gasoline$NIR[,i], pch = 21, main = paste0("Octane vs.", colnames(gasoline$NIR)[i]))
for(i in 17:32) plot(gasoline$octane, gasoline$NIR[,i], pch = 21, main = paste0("Octane vs.", colnames(gasoline$NIR)[i]))
View(data)
rm(list = ls())
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\00_basics\\05_anomaly_detection\\02_異常検知_時系列\\qtdbsel102")
# ------------------------------------------------------------------------------
# data:  qtdbsel102
# ------------------------------------------------------------------------------
data <- read.csv(file = "qtdbsel102.txt", header = FALSE, sep = "")
str(data)
head(data)
# ----------
# add date variable
data$date <- seq.Date(from = as.Date('1900-01-01'), to = as.Date('2020-10-31'), by = 'days')[1:nrow(data)]
dat2 <- data %>% dplyr::select(date, V2)
library(AnomalyDetection)
help("AnomalyDetectionTs")
ano_pos <- AnomalyDetectionTs(dat2, direction = "pos")
ano_pos <- AnomalyDetectionTs(dat2, direction = "pos", max_anoms = 0.05)
ano_pos <- AnomalyDetectionTs(dat2, direction = "pos", plot = FALSE, max_anom = 0.05)
ano_neg <- AnomalyDetectionTs(dat2, direction = "neg", plot = FALSE, max_anom = 0.05)
idx_pos <- which(substring(dat2$date,1,10) %in% substring(ano_pos$anoms$timestamp,1,10))
idx_neg <- which(substring(dat2$date,1,10) %in% substring(ano_neg$anoms$timestamp,1,10))
# ----------
graphics.off()
par(mfrow = c(2,1))
plot(c(dat2$V2), type = "l", main = "original series")
abline(v = idx_pos, col = "blue", lty = 1)
plot(c(dat2$V2), type = "l", main = "original series")
abline(v = idx_neg, col = "blue", lty = 1)
ano_pos <- AnomalyDetectionTs(dat2, direction = "pos", plot = FALSE, max_anom = 0.001)
ano_neg <- AnomalyDetectionTs(dat2, direction = "neg", plot = FALSE, max_anom = 0.001)
idx_pos <- which(substring(dat2$date,1,10) %in% substring(ano_pos$anoms$timestamp,1,10))
idx_neg <- which(substring(dat2$date,1,10) %in% substring(ano_neg$anoms$timestamp,1,10))
graphics.off()
par(mfrow = c(2,1))
plot(c(dat2$V2), type = "l", main = "original series")
abline(v = idx_pos, col = "blue", lty = 1)
plot(c(dat2$V2), type = "l", main = "original series")
abline(v = idx_neg, col = "blue", lty = 1)
dat2 <- data %>% dplyr::select(date, V3)
ano_pos <- AnomalyDetectionTs(dat2, direction = "pos", plot = FALSE, max_anoms = 0.001)
ano_neg <- AnomalyDetectionTs(dat2, direction = "neg", plot = FALSE, max_anoms = 0.001)
idx_pos <- which(substring(dat2$date,1,10) %in% substring(ano_pos$anoms$timestamp,1,10))
idx_neg <- which(substring(dat2$date,1,10) %in% substring(ano_neg$anoms$timestamp,1,10))
# ----------
graphics.off()
par(mfrow = c(2,1))
plot(c(dat2$V3), type = "l", main = "original series and pos detected")
abline(v = idx_pos, col = "blue", lty = 1)
plot(c(dat2$V3), type = "l", main = "original series and neg detected")
abline(v = idx_neg, col = "blue", lty = 1)
ano_pos <- AnomalyDetectionTs(dat2, direction = "pos", plot = FALSE, max_anoms = 0.001, longerm = TRUE)
ano_pos <- AnomalyDetectionTs(dat2, direction = "pos", plot = FALSE, max_anoms = 0.001, longterm = TRUE)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\00_basics\\05_anomaly_detection\\02_異常検知_入力出力データ\\headsize")
# ------------------------------------------------------------------------------
# data:  headsize
#   - data on head lenght and head breadth for each of the 1st two adult sons in 25 families
# ------------------------------------------------------------------------------
data <- read.csv(file = "headsize.txt", header = T, sep = "\t")
names(data)
# ----------
str(data)
# ----------
# standardize data
data <- sweep(data, 2, apply(data, 2, sd), FUN = "/")
# ------------------------------------------------------------------------------
# data exploration
# ------------------------------------------------------------------------------
graphics.off()
par(mfrow = c(1,2))
plot(data$head2 ~ data$head1, main = "head: 2nd son vs 1st son")
plot(data$breadth1 ~ data$breadth2, main = "breadth: 2nd son vs 1st son")
# -->
# both are highly correlated
cor(data$head1, data$head2)
cor(data$breadth1, data$breadth2)
# ------------------------------------------------------------------------------
# Canonical Correlation Analysis
# ------------------------------------------------------------------------------
( R <- cor(data) )
# ----------
# decompose correlation matrix
( r11 <- R[1:2, 1:2] )
( r22 <- R[-(1:2), -(1:2)] )
( r12 <- R[1:2, -(1:2)] )
( r21 <- R[-(1:2), 1:2] )
# ----------
# eigenvectors of matrices
( E1 <- solve(r11) %*% r12 %*% solve(r22) %*% r21 )
( E2 <- solve(r22) %*% r21 %*% solve(r11) %*% r12 )
# ----------
# eigenvalues and eigenvectors
# column 1 of eigenvectors is for 1st variate
# column 2 of eigenvectors is for 2nd variate
( e1 <- eigen(E1) )
# -->
# f1 = +0.73 * head1 + 0.69 * breadth1
# f2 = -0.70 * head1 + 0.71 * breadth1
( e2 <- eigen(E2) )
# -->
# s1 = -0.68 * head2 - 0.70 * breadth2
# s2 = -0.71 * head2 + 0.71 * breadth2
# ----------
# linear functions for 1st son (f) and 2nd son (s)
f1 <- as.matrix(data[,1:2]) %*% e1$vectors[,1]
f2 <- as.matrix(data[,1:2]) %*% e1$vectors[,2]
s1 <- as.matrix(data[,3:4]) %*% e2$vectors[,1]
s2 <- as.matrix(data[,3:4]) %*% e2$vectors[,2]
# ----------
# correlation of first variate for 1st son and 2nd son  = -0.79
# now we can find one more correlated variate
cor(f1, s1)
# almost no corrleation of 2nd variate for 1st son and 2nd son = -0.05
cor(f2, s2)
# ----------
graphics.off()
par(mfrow = c(1,2))
plot(s1 ~ f1, main = "first variate: 2nd son vs 1st son")
abline(v = mean(f1), h = mean(s1), col = "darkgray", lty = 2)
text(f1, s1, label = 1:25, cex = 1.2)
plot(s2 ~ f2, main = "2nd variate: 2nd son vs 1st son")
abline(v = mean(f2), h = mean(s2), col = "darkgray", lty = 2)
text(f2, s2, label = 1:25, cex = 1.2)
# ----------
graphics.off()
par(mfrow = c(1,2))
plot(f2 ~ f1, main = "2nd variate vs 1st variate for 1st son of 25 family")
abline(v = mean(f1), h = mean(f2), col = "darkgray", lty = 2)
text(f1, f2, label = 1:25, cex = 1.2)
plot(s2 ~ s1, main = "2nd variate vs 1st variate for 2nd son of 25 family")
abline(v = mean(s1), h = mean(s2), col = "darkgray", lty = 2)
text(s1, s2, label = 1:25, cex = 1.2)
# ------------------------------------------------------------------------------
# anomaly detection by top 1 to 2 canonical covariate
# ------------------------------------------------------------------------------
X <- as.matrix(data[,1:2])
Y <- as.matrix(data[,3:4])
# anomaly scores for each canonical covariates (1 to 2)
a <- matrix(nrow = nrow(X), ncol = 2, 0)
for(i in 1:2){
f <- X %*% e1$vectors[,i]
g <- Y %*% e2$vectors[,i]
D <- data.frame(f = f, g = g)
mod <- lm(g ~ f, data = D)
sig2 <- sum(resid(mod)^2) / nrow(D)
a[,i] <- c((g - resid(mod))^2 / sig2)
}
# ----------
fall <- X %*% e1$vectors[,1:2]
gall <- Y %*% e2$vectors[,1:2]
Dall <- data.frame(f = fall, g = gall)
head(Dall)
# ----------
graphics.off()
par(mfcol = c(3,2))
plot(Dall[,"f.1"], type = "h", main = "1st variate:  1st son")
plot(Dall[,"g.1"], type = "h", main = "1st variate:  2nd son")
plot(a[,1], type = "h", main = "1st variate anomaly")
plot(Dall[,"f.2"], type = "h", main = "2nd variate:  1st son")
plot(Dall[,"g.2"], type = "h", main = "2nd variate:  2nd son")
plot(a[,2], type = "h", main = "2nd variate anomaly")
# -->
# 1st variate:  24, 6, 8, 25
# 2nd variate:  11, 25, 24, 13
# ----------
idx1 <- c(6,8,24,25)
idx2 <- c(11,13,25,24)
par(mfrow = c(2,1))
matplot(Y, type = "l", main = "2nd son of 25 family, head2 and breadth2")
abline(v = idx1)
matplot(Y, type = "l", main = "2nd son of 25 family, head2 and breadth2")
abline(v = idx2)
# ----------
# by variate
graphics.off()
par(mfrow = c(1,2))
idx <- unique(c(idx1))
colorcode <- rep(0, nrow(X))
colorcode[idx] <- 1
plot(s1 ~ f1, pch = 21, main = "1st variate: 2nd son vs 1st son", bg = colorcode)
abline(v = mean(f1), h = mean(s1), col = "darkgray", lty = 2)
text(f1+0.1, s1+0.1, label = 1:25, cex = 1.2)
idx <- unique(c(idx2))
colorcode <- rep(0, nrow(X))
colorcode[idx] <- 1
plot(s2 ~ f2, pch = 21, main = "2nd variate: 2nd son vs 1st son", bg = colorcode)
abline(v = mean(f2), h = mean(s2), col = "darkgray", lty = 2)
text(f2+0.1, s2+0.1, label = 1:25, cex = 1.2)
# ----------
# by son type
# 24th family moves from upper right (1st son) to bottom left (2nd son)
idx <- unique(c(idx1, idx2))
colorcode <- rep(0, nrow(X))
colorcode[idx] <- 1
graphics.off()
par(mfrow = c(1,2))
plot(f2 ~ f1, pch = 21, main = "1st son of 25 family: 2nd vs 1st variate", bg = colorcode, xlim = c(24, 32), ylim = c(0, 2.5))
abline(v = mean(f1), h = mean(f2), col = "darkgray", lty = 2)
text(f1+0.1, f2+0.1, label = 1:25, cex = 1.2)
plot(s2 ~ s1, pch = 21, main = "2nd son of 25 family: 2nd vs 1st variate", bg = colorcode, xlim = c(-32, -26), ylim = c(1.5, 4.0))
abline(v = mean(s1), h = mean(s2), col = "darkgray", lty = 2)
text(s1+0.1, s2+0.1, label = 1:25, cex = 1.2)
rm(list = ls())
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\uscrime")
# ------------------------------------------------------------------------------
# data:  UScrime
#    - M:  proportion of men aged 14 to 24
#    - Ed:  average educated years
#    - Po1:  police budget at FY1960
#    - Po2:  police budget at FY1959
#    - LF:  ratio of labor force
#    - M.F:  number of men per 1000 women
#    - pop:  population at state
#    - NW:  non-white population per 1000
#    - U1:  unemployment ratio for men in urban area, aged 14 - 24
#    - U2:  unemployment ratio for men in urban araa, aged 35 to 39
#    - GDP:  GDP per person at state
#    - Ineq:  economical iequality index
#    - Prob:  proportion of imprisonment
#    - Time:  average years of imprisonment
# ------------------------------------------------------------------------------
library(MASS)
str(UScrime)
car::some(UScrime)
cor(UScrime)
caret::findCorrelation(UScrime)
caret::findCorrelation(as.matrix(UScrime))
as.matrix(UScrime)
caret::findCorrelation(cor(UScrime))
res <- caret::findCorrelation(cor(UScrime))
res
names(res)
res <- caret::findCorrelation(cor(UScrime), curoff = 0.4)
res <- caret::findCorrelation(cor(UScrime), cutoff = 0.4)
res
res <- caret::findCorrelation(cor(UScrime), cutoff = 0.4)
colnames(UScrime)[res]
res <- caret::findCorrelation(cor(UScrime), cutoff = 0.6)
colnames(UScrime)[res]
res <- caret::findCorrelation(cor(UScrime), cutoff = 0.7)
colnames(UScrime)[res]
str(UScrime)
res <- caret::findCorrelation(cor(UScrime), cutoff = 0.7)
colnames(UScrime)[res]
