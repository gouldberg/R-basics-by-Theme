f3 <- fitDist(sp500w, type = "realline", k = log(length(sp500w)), trace = TRUE)
f2$fits
f2$fails
f3$fits
f3$fails
histDist(sp500w, family = "JSUo", nbins = 30, line.wd = 2.5)
f1_2 <- gamlss(sp500w ~ 1, family = "JSUo")
summary(f1_2)
library(gamlss.mx)
# mixture = "np":  nonparametric finite mixtures
# sigma.fo = ~ MASS:  different sigma for each
sp.1 <- gamlssNP(formula = Close ~ 1, mixture = "np", K = 1, tol = 1, data = sp500w, family = NO, plot.opt = 0)
sp.2 <- gamlssNP(formula = Close ~ 1, sigma.fo = ~MASS, mixture = "np", K = 2, tol = 1, data = sp500w, family = NO, plot.opt = 0)
sp.3 <- gamlssNP(formula = Close ~ 1, sigma.fo = ~MASS, mixture = "np", K = 3, tol = 1, data = sp500w, family = NO, plot.opt = 0)
sp.4 <- gamlssNP(formula = Close ~ 1, sigma.fo = ~MASS, mixture = "np", K = 4, tol = 1, data = sp500w, family = NO, plot.opt = 0)
# ----------
GAIC(sp.1, sp.2, sp.3, sp.4)
GAIC(sp.1, sp.2, sp.3, sp.4, k = log(length(sp500w)))
sp.3
head(sp.3$post.prob[[1]])
wp(sp.3)
GAIC(sp.1, sp.2, sp.3, sp.4)
GAIC(sp.1, sp.2, sp.3, sp.4, k = log(length(sp500w)))
sp.4 <- gamlssNP(formula = Close ~ 1, sigma.fo = ~MASS, mixture = "np", K = 4, tol = 1, data = sp500w, family = NO, plot.opt = 0)
GAIC(sp.1, sp.2, sp.3, sp.4)
GAIC(sp.1, sp.2, sp.3, sp.4, k = log(length(sp500w)))
fit_gmx <- gamlssMXfits(formula = Close ~ 1, K = 3, sigma.fo = ~ MASS, data = sp500w, family = NO, plot.opt = 0)
fit_gmx
fyNO <- dMX(y = week_x,
mu = mu,
sigma = sig,
pi = pi,
family = list("NO", "NO", "NO"))
plot(fyNO ~ week_x, type="l")
# ----------
# 3 mixed normal distribution image
fyNO1 <- dnorm(x = week_x,mean = mu[1], sd = sqrt(sig[1]))
fyNO2 <- dnorm(x = week_x,mean = mu[2], sd = sqrt(sig[2]))
fyNO3 <- dnorm(x = week_x,mean = mu[3], sd = sqrt(sig[3]))
plot(week_x, fyNO1, type="l", lty = 2, col = "black",
xlim = c(-0.3, 0.3), ylim = c(0, 5), xlab = "weekly return", ylab = "",
main = "3 mixed normal distribuion", cex.main = 2)
lines(week_x, fyNO2, type="l", lty = 1, col = "blue")
lines(week_x, fyNO3, type="l", lty = 3, col = "red")
week_x <- seq(-0.3, 0.3, by = 0.001)
mu <- c(-0.002344, 0.004639, -0.003436)
sig <- c(exp(-2.51), exp(-4.379), exp(-3.507))
pi <- c(0.02929457, 0.5428803, 0.4278252)
fyNO <- dMX(y = week_x,
mu = mu,
sigma = sig,
pi = pi,
family = list("NO", "NO", "NO"))
plot(fyNO ~ week_x, type="l")
fyNO1 <- dnorm(x = week_x,mean = mu[1], sd = sqrt(sig[1]))
fyNO2 <- dnorm(x = week_x,mean = mu[2], sd = sqrt(sig[2]))
fyNO3 <- dnorm(x = week_x,mean = mu[3], sd = sqrt(sig[3]))
plot(week_x, fyNO1, type="l", lty = 2, col = "black",
xlim = c(-0.3, 0.3), ylim = c(0, 5), xlab = "weekly return", ylab = "",
main = "3 mixed normal distribuion", cex.main = 2)
lines(week_x, fyNO2, type="l", lty = 1, col = "blue")
lines(week_x, fyNO3, type="l", lty = 3, col = "red")
GAIC(sp.1, sp.2, sp.3, k = log(length(sp500w)))
sp.3
GAIC(sp.1, sp.2, sp.3)
graphics.off()
par(mfrow = c(1, 1))
# acf2:  produces a simultaneous plot (and a printout) of the sample ACF and PACF
# The zero lag value of the ACF is removed.
astsa::acf2(sp500w, 52, main = "S&P500 weekly returns")
nextn(length(sp500w))
graphics.off()
par(mfrow=c(1,1))
# log = "no":  periodogram is plotted on a log10 scale by default and want not scaling
sp5.per <- astsa::mvspec(sp500w, log = "no")
L1 <- 3
L2 <- 52*1+1
L3 <- 52*2+1
L4 <- 52*4+1
L5 <- 52*8+1
par(mfrow=c(2,3))
# To compute averaged periodograms, use the Daniell kernel, and specify m, where L = 2m + 1
astsa::mvspec(sp500w, kernel("daniell", (L1-1)/2), log = "no")
astsa::mvspec(sp500w, kernel("daniell", (L2-1)/2), log = "no")
astsa::mvspec(sp500w, kernel("daniell", (L3-1)/2), log = "no")
astsa::mvspec(sp500w, kernel("daniell", (L4-1)/2), log = "no")
astsa::mvspec(sp500w, kernel("daniell", (L5-1)/2), log = "no")
sarima(sp500w_c, p = 15, d = 0, q = 12, no.constant = FALSE)
y <- ts(sp500w, start = 2003, freq = 52)
# depmixS4, uses the EM algorithm, but does not provide standard errors.
library(depmixS4)
model <- depmix(y ~ 1, nstates = 3, data = data.frame(y))
model
set.seed(2)
summary(fm <- fit(model))
# ----------
para.mle <- as.vector(getpars(fm)[-c(1:3)])
# for the label switch
permu <- matrix(c(0, 0, 1, 0, 1, 0, 1, 0, 0), 3, 3)
( mtrans.mle <- permu %*% round(t(matrix(para.mle[1:9], 3, 3)), 3) %*% permu )
# -->
# note that 2 --> 2 transition is almost 0
# and 1 --> 3 is almost 0, too.
# 3 fitted normals: N(mu1 = 0.04, sigma1 = 0.14),  N(mu2 = -0.034, sigma2 = 0.009),  N(mu3 = -0.003, sigma3 = 0.044)
( norms.mle <- round(matrix(para.mle[10:15], 2, 3), 3) %*% permu )
culer <- 4 - posterior(fm)[,1]
culer[culer == 3] <- 4
graphics.off()
layout(matrix(c(1,2,1,3), 2), heights = c(1, 0.75))
par(mar = c(2.5, 2.5, 0.5, 0.5), mgp = c(1.6, 0.6, 0))
# S&P 500 weekly returns with estimated regimes labeled as a number, 1, 2, or 3
# The minimum value of -20% during the financial crisis has been truncated to improve the graphics.
plot(y, main = "", ylab = "S&P500 Weekly Returns", type = "h", col = gray(0.7), ylim = c(-0.11, 0.11))
text(y, col = culer, labels = 4 - posterior(fm)[,1])
# ----------
# Sample ACF of the squared retunrs
acf(y ^ 2, xlim = c(0.02, 0.5), ylim = c(-0.09, 0.5), panel.first = grid(lty = 2))
# ----------
# Histogram of the data with the 3 estimated normal densities superimposed
hist(y, breaks = 25, prob = TRUE, main = "", border = gray(0.7))
culer <- c(1,2,4)
pi.hat <- colSums(posterior(fm)[-1,2:4]) / length(y)
for(i in 1:3){
mu <- norms.mle[1,i]
sig <- norms.mle[2,i]
x <- seq(-0.15, 0.12, by = 0.001)
lines(x, pi.hat[4-i] * dnorm(x, mean = mu, sd = sig), col = culer[i])
}
# -->
# Note that regime 2 appears to represent a somewhat large-in-magnitude negative return, and may be a lone dip,
# or the start of end of a highly volatile period.
# ----------
# note that 1 --> 3, 3 --> 1  (switched)
# 3 fitted normals: N(mu3 = 0.04, sigma3 = 0.14),  N(mu2 = -0.034, sigma2 = 0.009),  N(mu1 = -0.003, sigma1 = 0.044)
( norms.mle <- round(matrix(para.mle[10:15], 2, 3), 3) %*% permu )
graphics.off()
data(sp500w, package = "astsa")
str(sp500w)
sp500w
# ------------------------------------------------------------------------------
# data exploration:  data distribution
# ------------------------------------------------------------------------------
psych::describe(sp500w)
hist(sp500w, breaks = seq(-0.3, 0.2, 0.01))
graphics.off()
par(mfrow = c(2,1))
plot(sp500w, type = "l")
plot(sp500w, type = "h")
hist(sp500w, breaks = seq(-0.3, 0.2, 0.01))
psych::describe(sp500w)
library(gamlss)
f1 <- fitDist(sp500w, type = "realline", k = 2, trace = TRUE)
f1$fits
histDist(sp500w, family = "JSUo", nbins = 30, line.wd = 2.5)
sp.1 <- gamlssNP(formula = Close ~ 1, mixture = "np", K = 1, tol = 1, data = sp500w, family = NO, plot.opt = 0)
sp.2 <- gamlssNP(formula = Close ~ 1, sigma.fo = ~MASS, mixture = "np", K = 2, tol = 1, data = sp500w, family = NO, plot.opt = 0)
sp.3 <- gamlssNP(formula = Close ~ 1, sigma.fo = ~MASS, mixture = "np", K = 3, tol = 1, data = sp500w, family = NO, plot.opt = 0)
sp.4 <- gamlssNP(formula = Close ~ 1, sigma.fo = ~MASS, mixture = "np", K = 4, tol = 1, data = sp500w, family = NO, plot.opt = 0)
GAIC(sp.1, sp.2, sp.3)
sp.3
wp(sp.3)
fit_gmx <- gamlssMXfits(formula = Close ~ 1, K = 3, sigma.fo = ~ MASS, data = sp500w, family = NO, plot.opt = 0)
fit_gmx
week_x <- seq(-0.3, 0.3, by = 0.001)
mu <- c(-0.002344, 0.004639, -0.003436)
sig <- c(exp(-2.51), exp(-4.379), exp(-3.507))
pi <- c(0.02929457, 0.5428803, 0.4278252)
fyNO <- dMX(y = week_x,
mu = mu,
sigma = sig,
pi = pi,
family = list("NO", "NO", "NO"))
plot(fyNO ~ week_x, type="l")
# ----------
# 3 mixed normal distribution image
fyNO1 <- dnorm(x = week_x,mean = mu[1], sd = sqrt(sig[1]))
fyNO2 <- dnorm(x = week_x,mean = mu[2], sd = sqrt(sig[2]))
fyNO3 <- dnorm(x = week_x,mean = mu[3], sd = sqrt(sig[3]))
plot(week_x, fyNO1, type="l", lty = 2, col = "black",
xlim = c(-0.3, 0.3), ylim = c(0, 5), xlab = "weekly return", ylab = "",
main = "3 mixed normal distribuion", cex.main = 2)
lines(week_x, fyNO2, type="l", lty = 1, col = "blue")
lines(week_x, fyNO3, type="l", lty = 3, col = "red")
fn <- getpdfMX(fit_gmx)
par(mfrow = c(1,1))
MASS::truehist(sp500w$Close, nbins = 30, col = "grey", xlab = "weekly return")
lines(week_x, fn(week_x), lty = 1, lwd = 2, col = "blue")
fyNO1 <- dnorm(x = week_x,mean = mu[1], sd = sqrt(sig[1]))
fyNO2 <- dnorm(x = week_x,mean = mu[2], sd = sqrt(sig[2]))
fyNO3 <- dnorm(x = week_x,mean = mu[3], sd = sqrt(sig[3]))
plot(week_x, fyNO1, type="l", lty = 2, col = "black",
xlim = c(-0.3, 0.3), ylim = c(0, 5), xlab = "weekly return", ylab = "",
main = "3 mixed normal distribuion", cex.main = 2)
lines(week_x, fyNO2, type="l", lty = 1, col = "blue")
lines(week_x, fyNO3, type="l", lty = 3, col = "red")
graphics.off()
par(mfrow = c(1, 1))
# acf2:  produces a simultaneous plot (and a printout) of the sample ACF and PACF
# The zero lag value of the ACF is removed.
astsa::acf2(sp500w, 52, main = "S&P500 weekly returns")
nextn(length(sp500w))
graphics.off()
par(mfrow=c(1,1))
# log = "no":  periodogram is plotted on a log10 scale by default and want not scaling
sp5.per <- astsa::mvspec(sp500w, log = "no")
L1 <- 3
L2 <- 52*1+1
L3 <- 52*2+1
L4 <- 52*4+1
L5 <- 52*8+1
par(mfrow=c(2,3))
# To compute averaged periodograms, use the Daniell kernel, and specify m, where L = 2m + 1
astsa::mvspec(sp500w, kernel("daniell", (L1-1)/2), log = "no")
astsa::mvspec(sp500w, kernel("daniell", (L2-1)/2), log = "no")
astsa::mvspec(sp500w, kernel("daniell", (L3-1)/2), log = "no")
astsa::mvspec(sp500w, kernel("daniell", (L4-1)/2), log = "no")
astsa::mvspec(sp500w, kernel("daniell", (L5-1)/2), log = "no")
# -->
# While changing bandwidth, the spectrum is also changing ... even though at same cycle
y <- ts(sp500w, start = 2003, freq = 52)
# depmixS4, uses the EM algorithm, but does not provide standard errors.
library(depmixS4)
model <- depmix(y ~ 1, nstates = 3, data = data.frame(y))
model
# ----------
# Estimation results
set.seed(2)
summary(fm <- fit(model))
# ----------
para.mle <- as.vector(getpars(fm)[-c(1:3)])
# for the label switch
permu <- matrix(c(0, 0, 1, 0, 1, 0, 1, 0, 0), 3, 3)
# transition matrix
( mtrans.mle <- permu %*% round(t(matrix(para.mle[1:9], 3, 3)), 3) %*% permu )
# -->
# note that 2 --> 2 transition is almost 0
# and 1 --> 3 is almost 0, too.
# 3 fitted normals: N(mu1 = 0.04, sigma1 = 0.14),  N(mu2 = -0.034, sigma2 = 0.009),  N(mu3 = -0.003, sigma3 = 0.044)
( norms.mle <- round(matrix(para.mle[10:15], 2, 3), 3) %*% permu )
# switch labels 1 and 3
culer <- 4 - posterior(fm)[,1]
culer[culer == 3] <- 4
graphics.off()
layout(matrix(c(1,2,1,3), 2), heights = c(1, 0.75))
par(mar = c(2.5, 2.5, 0.5, 0.5), mgp = c(1.6, 0.6, 0))
# S&P 500 weekly returns with estimated regimes labeled as a number, 1, 2, or 3
# The minimum value of -20% during the financial crisis has been truncated to improve the graphics.
plot(y, main = "", ylab = "S&P500 Weekly Returns", type = "h", col = gray(0.7), ylim = c(-0.11, 0.11))
text(y, col = culer, labels = 4 - posterior(fm)[,1])
# ----------
# Sample ACF of the squared retunrs
acf(y ^ 2, xlim = c(0.02, 0.5), ylim = c(-0.09, 0.5), panel.first = grid(lty = 2))
# ----------
# Histogram of the data with the 3 estimated normal densities superimposed
hist(y, breaks = 25, prob = TRUE, main = "", border = gray(0.7))
culer <- c(1,2,4)
pi.hat <- colSums(posterior(fm)[-1,2:4]) / length(y)
for(i in 1:3){
mu <- norms.mle[1,i]
sig <- norms.mle[2,i]
x <- seq(-0.15, 0.12, by = 0.001)
lines(x, pi.hat[4-i] * dnorm(x, mean = mu, sd = sig), col = culer[i])
}
# -->
# Note that regime 2 appears to represent a somewhat large-in-magnitude negative return, and may be a lone dip,
# or the start of end of a highly volatile period.
# ----------
# note that 1 --> 3, 3 --> 1  (switched)
# 3 fitted normals: N(mu3 = 0.04, sigma3 = 0.14),  N(mu2 = -0.034, sigma2 = 0.009),  N(mu1 = -0.003, sigma1 = 0.044)
( norms.mle <- round(matrix(para.mle[10:15], 2, 3), 3) %*% permu )
par(mfrow=c(1,1))
# plot(sp500w)
plot(sp500w_c)
# spar = 0.5 to emphasize the mid-term effect, and spar = 1 to emphasize the trend
lines(smooth.spline(time(sp500w_c), sp500w_c, spar = 0.25), lwd = 2, col = "blue")
lines(smooth.spline(time(sp500w_c), sp500w_c, spar = 0.5), lwd = 2, col = "red")
lines(smooth.spline(time(sp500w_c), sp500w_c, spar = 1), lwd = 2, col = "black")
rm(list=ls())
graphics.off()
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\m_tenstocks")
packages <- c("dplyr", "tidyverse")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  m-tenstocks
# ------------------------------------------------------------------------------
mtenstocks <- read.csv("m-tenstocks.txt", sep = " ", header = T)
str(mtenstocks)
dim(mtenstocks)
car::some(mtenstocks)
rtn <- log(mtenstocks[,2:11] + 1)
comp_name <- colnames(rtn)
graphics.off()
par(mfrow = c(3,3))
for(i in 1:length(comp_name)){ hist(rtn[,comp_name[i]], main = comp_name[i]) }
MTSplot(mtenstocks[,2:11])
graphics.off()
# for(i in 2:11){ acf2(mtenstocks[,i], max.lag = 24, main = paste0(colnames(mtenstocks)[i])) }
for(i in 1:10){ acf2(rtn[,i], max.lag = 24, main = paste0(colnames(rtn)[i])) }
graphics.off()
for(i in 1:10){ acf2(rtn[,i], max.lag = 24, main = paste0(colnames(rtn)[i])) }
std <- diag(1 / sqrt(diag(cov(rtn))))
rtns <- as.matrix(rtn) %*% std
# ------------------------------------------------------------------------------
# Principal component analysis
# ------------------------------------------------------------------------------
m1 <- princomp(rtns)
names(m1)
summary(m1)
# ----------
par(mfrow = c(1,1))
screeplot(m1)
# square root of eigenvalues
sdev <- m1$sdev
# number of PCs
pc_n <- 3
SD <- diag(sdev[1:pc_n])
M <- m1$loadings
L <- M[,1:pc_n] %*% SD
print(round(L, 3))
# -->
# 1st factor is a weighted average of the log returns with similar weights for stocks in the same industrial sector
# 2nd factor is essentially a weighted difference of the log returns between the semiconductor sector and the
# pharmaceutical industry
# 3rd cactor represents a weighted difference of log returns between the semiconductor sector and the investment banks
# ------------------------------------------------------------------------------
# Covariance matrix of errors
# ------------------------------------------------------------------------------
LLt <- L %*% t(L)
diag(LLt)
sigE <- 1 - diag(LLt)
sigE
# -->
# the variances of the noise components are between 18 to 35% of each standardized return series,
# indicating that marked variablity rimains in each log return series.
head(m1$scores)
MTSplot(m1$scores[,1:3])
m1$loadings
# 132 * 10(Comp)
m1$scores
# ----------
# individuals scores:  1 - 5 components
( pred <- data.frame(m1$scores[,1:3] %*% t(m1$loadings[,1:3])) )
colnames(pred) <- colnames(rtn)
res_scores <- data.frame(m1$scores)
# ----------
graphics.off()
par(mfrow = c(3,1), mar = c(2,2,2,2))
# factor scores
plot(res_scores[,"Comp.1"], type = "l", lty = 1, col = "black", ylim = c(-5, 5))
lines(res_scores[,"Comp.2"], type = "l", lty = 2, col = gray(0.3))
lines(res_scores[,"Comp.3"], type = "l", lty = 3, col = gray(0.7))
dimnames(rtns)[[2]] <- colnames(rtn)
# TXN and JPM
obj <- "TXN"
obj2 <- "JPM"
# blue: model   black: original time series
plot(pred[,obj], type = "l", lty = 1, lwd = 2, col = "blue", ylim = c(-4, 4))
lines(rtns[,obj], type = "l", lty = 2, lwd = 1, col = "black")
plot(pred[,obj2], typ = "l", lty = 1, lwd = 2, col = "blue", ylim = c(-4, 4))
lines(rtns[,obj2], type = "l", lty = 2, lwd = 1, col = "black")
m1$loadings
library(Gifi)
prin <- princals(rtn)
# prin <- princals(rtns)
prin
plot(prin, main = "log returns Loadings")
par(mrrow = c(1,1))
plot(prin, main = "log returns Loadings")
par(mfrow = c(1,1))
plot(prin, main = "log returns Loadings")
resnf <- psych::nfactors(rtn, n = 8, fm = "ml", cor = "cor")
resnf
resFA2 <- fa(polcor, nfactors = 3, rotate = "varimax", fm = "ml")
polcor <- cor(rtn)
polcor
library(psych)
resFA <- fa(polcor, nfactors = 3, rotate = "none", fm = "ml")
summary(resFA)
print(resFA$loadings)
resFA2 <- fa(polcor, nfactors = 3, rotate = "varimax", fm = "ml")
# ------------------------------------------------------------------------------
# Check factor loadings
# ------------------------------------------------------------------------------
print(resFA$loadings, cutoff = 0.2)
print(resFA2$loadings, cutoff = 0.2)
print(resFA3$loadings, cutoff = 0.2)
print(resFA4$loadings, cutoff = 0.2)
# -->
# Unorthogonal solutions are better match to Princal solutions !!
# ----------
# for comparison
plot(prin)
round(resFA2$communality, 4)
round(resFA3$communality, 4)
round(resFA4$communality, 4)
resFA3 <- fa(polcor, nfactors = 3, rotate = "oblimin", fm = "ml")
resFA4 <- fa(polcor, nfactors = 4, rotate = "oblimin", fm = "ml")
# ------------------------------------------------------------------------------
# Check factor loadings
# ------------------------------------------------------------------------------
print(resFA3$loadings, cutoff = 0.2)
print(resFA4$loadings, cutoff = 0.2)
# -->
# Unorthogonal solutions are better match to Princal solutions !!
# ----------
# for comparison
plot(prin)
# MRK, PFE, LLY
# GS, MS, JPM
# TSM, INTC, TXN, MU
# ----------
fa.diagram(resFA2)
fa.diagram(resFA3)
fa.diagram(resFA4)
round(resFA2$communality, 4)
round(resFA3$communality, 4)
round(resFA4$communality, 4)
resFA3_scores <- factor.scores(rtn, f = resFA3, method = "Thurstone")$scores
# resFA3_scores <- factor.scores(rtn, f = resFA3, method = "Harman")$scores
resFA3$loadings
# ----------
res_scores <- resFA3_scores
# ----------
graphics.off()
par(mfrow = c(3,1), mar = c(2,2,2,2))
plot(res_scores[,"ML1"], type = "l", lty = 1, lwd = 2, col = "black", ylim = c(-4, 4), main = "ML1: main for Investment Bank", cex.main = 2)
abline(v = seq(0, 130, by = 10), lty = 2, col = gray(0.7))
abline(h = c(-2, 2), lty = 2, col = gray(0.7))
plot(res_scores[,"ML2"], type = "l", lty = 1, lwd = 2, col = gray(0.7), ylim = c(-4, 4), main = "ML2: main for Semi-Conductor", cex.main = 2)
abline(v = seq(0, 130, by = 10), lty = 2, col = gray(0.7))
abline(h = c(-2, 2), lty = 2, col = gray(0.7))
plot(res_scores[,"ML3"], type = "l", lty = 1, lwd = 2, col = "blue", ylim = c(-4, 4), main = "ML3: main for Pharmaceutical", cex.main = 2)
abline(v = seq(0, 130, by = 10), lty = 2, col = gray(0.7))
abline(h = c(-2, 2), lty = 2, col = gray(0.7))
graphics.off()
par(mfrow = c(1,1))
resFA3$weights
tmp <- data.frame(resFA3$weights)
tmp <- tmp %>% mutate(id = rownames(resFA3$weight), sector = c(1,1,1,1,2,2,2,3,3,3))
# ----------
graphics.off()
par(mfrow = c(1,2))
plot(ML2 ~ ML1, data = tmp, cex = 2, pch = tmp$sector, col = tmp$sector,
xlim = c(-0.1, 0.8), ylim = c(-0.1, 0.4), main = "weights ML1 and ML2", cex.main = 2)
text(tmp$ML1 + 0.02, tmp$ML2 + 0.02, label = tmp$id, cex = 1.2)
abline(h = 0, v = 0, lty = 2, col = "gray")
plot(ML3 ~ ML1, data = tmp, cex = 2, pch = tmp$sector, col = tmp$sector,
xlim = c(-0.1, 0.8), ylim = c(-0.1, 0.4), main = "weights ML1 and ML3", cex.main = 2)
text(tmp$ML1 + 0.02, tmp$ML3 + 0.02, label = tmp$id, cex = 1.2)
abline(h = 0, v = 0, lty = 2, col = "gray")
# we apply unorthogonal solutions (resFA3)
# 10 * 3
round(resFA3$weights, 3)
# 10 * 3
resFA3$loadings
# 132 * 3
resFA3_scores <- factor.scores(rtn, f = resFA3, method = "Thurstone")$scores
# resFA3_scores <- factor.scores(rtn, f = resFA3, method = "Anderson")$scores
( res_scores <- data.frame(resFA3_scores) )
# ----------
# individuals scores
( pred <- resFA3_scores %*% t(resFA3$weights) )
resFA3wts <- data.frame(resFA3$weights)
# Semiconductor: ML2
# black: model
# blue: original time series
# red: 1st factor loagings
graphics.off()
par(mfrow = c(2,2), mar = c(2,2,2,2))
obj <- c("TXN", "MU", "INTC", "TSM")
obj_fa <- "ML2"
sort(round(resFA3$communality, 4))
# the communality: 0.70, 0.50, 0.73, 0.67  (middle to larges
for(i in 1:length(obj)){
plot(pred[,obj[i]], type = "l", lty = 1, lwd = 2, col = "black", ylim = c(-2, 2),
main = paste0(obj[i], " : ", obj_fa, " : weights ", round(resFA3wts[obj[i], obj_fa], 3)))
abline(v = seq(0, 130, by = 10), lty = 2, col = gray(0.7))
lines(rtn[,obj[i]], type = "l", lty = 1, lwd = 1, col = "blue")
lines(res_scores[,obj_fa], type = "l", lty = 1, lwd = 1, col = "red", ylim = c(-2, 2))
for(i in 1:length(obj)){
plot(pred[,obj[i]], type = "l", lty = 1, lwd = 2, col = "black", ylim = c(-2, 2),
main = paste0(obj[i], " : ", obj_fa, " : weights ", round(resFA3wts[obj[i], obj_fa], 3)))
abline(v = seq(0, 130, by = 10), lty = 2, col = gray(0.7))
lines(rtn[,obj[i]], type = "l", lty = 1, lwd = 1, col = "blue")
lines(res_scores[,obj_fa], type = "l", lty = 1, lwd = 1, col = "red", ylim = c(-2, 2))
}
graphics.off()
par(mfrow = c(2,2), mar = c(2,2,2,2))
obj <- c("JPM", "MS", "GS")
obj_fa <- "ML1"
sort(round(resFA3$communality, 4))
# the communality: 0.45, 0.65, 0.90  (small, middle, large)
for(i in 1:length(obj)){
plot(pred[,obj[i]], type = "l", lty = 1, lwd = 2, col = "black", ylim = c(-2, 2),
main = paste0(obj[i], " : ", obj_fa, " : weights ", round(resFA3wts[obj[i], obj_fa], 3)))
abline(v = seq(0, 130, by = 10), lty = 2, col = gray(0.7))
lines(rtn[,obj[i]], type = "l", lty = 1, lwd = 1, col = "blue")
lines(res_scores[,obj_fa], type = "l", lty = 1, lwd = 1, col = "red", ylim = c(-2, 2))
}
graphics.off()
par(mfrow = c(2,2), mar = c(2,2,2,2))
obj <- c("JPM", "MS", "GS")
obj_fa <- "ML1"
sort(round(resFA3$communality, 4))
# the communality: 0.45, 0.65, 0.90  (small, middle, large)
for(i in 1:length(obj)){
plot(pred[,obj[i]], type = "l", lty = 1, lwd = 2, col = "black", ylim = c(-2, 2),
main = paste0(obj[i], " : ", obj_fa, " : weights ", round(resFA3wts[obj[i], obj_fa], 3)))
abline(v = seq(0, 130, by = 10), lty = 2, col = gray(0.7))
lines(rtn[,obj[i]], type = "l", lty = 1, lwd = 1, col = "blue")
lines(res_scores[,obj_fa], type = "l", lty = 1, lwd = 1, col = "red", ylim = c(-2, 2))
}
