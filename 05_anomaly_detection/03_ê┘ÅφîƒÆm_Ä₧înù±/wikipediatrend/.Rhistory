X1 <- X1[w:1,]
# -----------
# right matrix
tstart <- t - w - k + 1
tend <- t - 1 + L
X2 <- t(embed(xi[tstart:tend], w))
X2 <- X2[w:1,]
# ----------
U1 <- svd(X1)$u[,1:m]
U2 <- svd(X2)$u[,1:m]
# degree of overwrapping of subspaces
sig1 <- svd(t(U1) %*% U2)$d[1]
# scores
score[t] <- 1 - sig1 ^ 2
}
# ----------
graphics.off()
par(mfrow = c(2,1))
# rng <- c(1260, 1340)
plot(xi, type = "l", main = "original series")
# abline(v = rng, lty = 2, col = "red")
plot(score, type = "l", lty = 1, col = "blue", main = "degree of change")
# abline(v = rng, lty = 2, col = "red")
m <- 4
k <- w/2
L <- k/2
Tt <- length(xi)
# ----------
score <- rep(0, Tt)
for(t in (w + k):(Tt - L + 1)){
# -----------
# left matrix
tstart <- t - w - k + 1
tend <- t - 1
X1 <- t(embed(xi[tstart:tend], w))
# reverse time
X1 <- X1[w:1,]
# -----------
# right matrix
tstart <- t - w - k + 1
tend <- t - 1 + L
X2 <- t(embed(xi[tstart:tend], w))
X2 <- X2[w:1,]
# ----------
U1 <- svd(X1)$u[,1:m]
U2 <- svd(X2)$u[,1:m]
# degree of overwrapping of subspaces
sig1 <- svd(t(U1) %*% U2)$d[1]
# scores
score[t] <- 1 - sig1 ^ 2
}
# ----------
graphics.off()
par(mfrow = c(2,1))
# rng <- c(1260, 1340)
plot(xi, type = "l", main = "original series")
# abline(v = rng, lty = 2, col = "red")
plot(score, type = "l", lty = 1, col = "blue", main = "degree of change")
# abline(v = rng, lty = 2, col = "red")
m <- 1
k <- w/2
L <- k/2
Tt <- length(xi)
# ----------
score <- rep(0, Tt)
for(t in (w + k):(Tt - L + 1)){
# -----------
# left matrix
tstart <- t - w - k + 1
tend <- t - 1
X1 <- t(embed(xi[tstart:tend], w))
# reverse time
X1 <- X1[w:1,]
# -----------
# right matrix
tstart <- t - w - k + 1
tend <- t - 1 + L
X2 <- t(embed(xi[tstart:tend], w))
X2 <- X2[w:1,]
# ----------
U1 <- svd(X1)$u[,1:m]
U2 <- svd(X2)$u[,1:m]
# degree of overwrapping of subspaces
sig1 <- svd(t(U1) %*% U2)$d[1]
# scores
score[t] <- 1 - sig1 ^ 2
}
# ----------
graphics.off()
par(mfrow = c(2,1))
# rng <- c(1260, 1340)
plot(xi, type = "l", main = "original series")
# abline(v = rng, lty = 2, col = "red")
plot(score, type = "l", lty = 1, col = "blue", main = "degree of change")
# abline(v = rng, lty = 2, col = "red")
m <- 2
k <- w/2
L <- k/2
Tt <- length(xi)
# ----------
score <- rep(0, Tt)
for(t in (w + k):(Tt - L + 1)){
# -----------
# left matrix
tstart <- t - w - k + 1
tend <- t - 1
X1 <- t(embed(xi[tstart:tend], w))
# reverse time
X1 <- X1[w:1,]
# -----------
# right matrix
tstart <- t - w - k + 1
tend <- t - 1 + L
X2 <- t(embed(xi[tstart:tend], w))
X2 <- X2[w:1,]
# ----------
U1 <- svd(X1)$u[,1:m]
U2 <- svd(X2)$u[,1:m]
# degree of overwrapping of subspaces
sig1 <- svd(t(U1) %*% U2)$d[1]
# scores
score[t] <- 1 - sig1 ^ 2
}
# ----------
graphics.off()
par(mfrow = c(2,1))
# rng <- c(1260, 1340)
plot(xi, type = "l", main = "original series")
# abline(v = rng, lty = 2, col = "red")
plot(score, type = "l", lty = 1, col = "blue", main = "degree of change")
# abline(v = rng, lty = 2, col = "red")
Dtr <- dat2[1:500,"views"]
# validation data
xi <- dat2[501:nrow(dat2),"views"]
Tt <- length(xi)
# ----------
# AR model, automatically selecting AR orders  --> AR(24)
ar.model <- ar(Dtr)
print(ar.model)
ar.model <- ar(Dtr)
print(ar.model)
# ------------------------------------------------------------------------------
# Compute predicted values ofr validation data set
# ------------------------------------------------------------------------------
( r <- ar.model$order )
alpha <- ar.model$ar
xmean <- ar.model$x.mean
sig2 <- ar.model$var.pred
# ----------
# compute predicted values for validation data (by each data point)
N <- Tt - r
X <- t(embed(xi - xmean, r))[,1:N]
dim(X)
ypred <- t(X) %*% alpha + xmean
# ------------------------------------------------------------------------------
# Compute anomaly score
# ------------------------------------------------------------------------------
y <- xi[(1 + r):Tt]
# anomaly score
a <- (y - as.numeric(ypred))^2 / sig2
# ----------
graphics.off()
par(mfrow = c(2,1))
plot(xi, type = "l", main = "original validation series")
lines(c(rep(NA, 24), ypred), lty = 1, col = "blue", lwd = 2)
graphics.off()
par(mfrow = c(2,1))
plot(xi, type = "l", main = "original validation series")
lines(c(rep(NA, 3), ypred), lty = 1, col = "blue", lwd = 2)
plot(c(rep(NA, 3), a), type = "l", lty = 1, col = "blue", main = "anomaly score", xlim = c(650, 1600))
y <- xi[(1 + r):Tt]
# anomaly score
a <- (y - as.numeric(ypred))^2 / sig2
graphics.off()
par(mfrow = c(2,1))
plot(xi, type = "l", main = "original validation series")
lines(c(rep(NA, 3), ypred), lty = 1, col = "blue", lwd = 2)
plot(c(rep(NA, 3), a), type = "l", lty = 1, col = "blue", main = "anomaly score")
( trans <- caret::BoxCoxTrans(dat2[,"views"]) )
dat2 <- predict(trans, newdata = dat2[,"views"])
graphics.off()
plot(dat2, type = "l")
data <- read.csv(file = "wikipediatrend.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
str(data)
head(data)
# ----------
data$date <- as.Date(data$date)
# dat2 <- data
dat2 <- data %>% filter(date >= "2016-01-01", date < "2018-06-01")
dat2 <- dat2[,"views"] - mean(dat2[,"views"])
dat2
( trans <- caret::BoxCoxTrans(dat2) )
data$date <- as.Date(data$date)
# dat2 <- data
dat2 <- data %>% filter(date >= "2016-01-01", date < "2018-06-01")
# ------------------------------------------------------------------------------
# Data Transformation:  Box-Cox Transformation
# ------------------------------------------------------------------------------
# demean + 1
dat2 <- dat2[,"views"] - mean(dat2[,"views"] + 1)
( trans <- caret::BoxCoxTrans(dat2) )
dat2 <- dat2[,"views"] - mean(dat2[,"views"] + 0.1)
data <- read.csv(file = "wikipediatrend.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
str(data)
head(data)
# ----------
data$date <- as.Date(data$date)
# dat2 <- data
dat2 <- data %>% filter(date >= "2016-01-01", date < "2018-06-01")
# ------------------------------------------------------------------------------
# Data Transformation:  Box-Cox Transformation
# ------------------------------------------------------------------------------
# demean + 1
dat2 <- dat2[,"views"] - mean(dat2[,"views"] + 0.1)
( trans <- caret::BoxCoxTrans(dat2) )
data$date <- as.Date(data$date)
# dat2 <- data
dat2 <- data %>% filter(date >= "2016-01-01", date < "2018-06-01")
# ------------------------------------------------------------------------------
# Data Transformation:  Box-Cox Transformation
# ------------------------------------------------------------------------------
# demean
dat2 <- dat2[,"views"] - mean(dat2[,"views"])
( trans <- caret::BoxCoxTrans(dat2) )
dat2 <- predict(trans, newdata = dat2)
graphics.off()
plot(dat2, type = "l")
data <- read.csv(file = "wikipediatrend.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
str(data)
head(data)
# ----------
data$date <- as.Date(data$date)
# dat2 <- data
dat2 <- data %>% filter(date >= "2016-01-01", date < "2018-06-01")
# demean
dat2 <- dat2[,"views"] - mean(dat2[,"views"])
( trans <- caret::BoxCoxTrans(dat2) )
dat2 <- data %>% filter(date >= "2016-01-01", date < "2018-06-01")
( trans <- caret::BoxCoxTrans(dat2) )
dat2 <- predict(trans, newdata = dat2)
# ----------
graphics.off()
plot(dat2, type = "l")
data <- read.csv(file = "wikipediatrend.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
str(data)
head(data)
# ----------
data$date <- as.Date(data$date)
# dat2 <- data
dat2 <- data %>% filter(date >= "2016-01-01", date < "2018-06-01")
( trans <- caret::BoxCoxTrans(dat2[,"views"]) )
dat2 <- predict(trans, newdata = dat2)
dat2 <- predict(trans, newdata = dat2[,"views"])
graphics.off()
plot(dat2, type = "l")
# training data
Dtr <- dat2[1:500]
# validation data
xi <- dat2[501:length(dat2)]
Tt <- length(xi)
# ----------
# AR model, automatically selecting AR orders  --> AR(34)
ar.model <- ar(Dtr)
print(ar.model)
# ------------------------------------------------------------------------------
# Compute predicted values ofr validation data set
# ------------------------------------------------------------------------------
( r <- ar.model$order )
alpha <- ar.model$ar
xmean <- ar.model$x.mean
sig2 <- ar.model$var.pred
# ----------
# compute predicted values for validation data (by each data point)
N <- Tt - r
X <- t(embed(xi - xmean, r))[,1:N]
dim(X)
ypred <- t(X) %*% alpha + xmean
# ------------------------------------------------------------------------------
# Compute anomaly score
# ------------------------------------------------------------------------------
y <- xi[(1 + r):Tt]
# anomaly score
a <- (y - as.numeric(ypred))^2 / sig2
graphics.off()
par(mfrow = c(2,1))
plot(xi, type = "l", main = "original validation series")
lines(c(rep(NA, 7), ypred), lty = 1, col = "blue", lwd = 2)
plot(c(rep(NA, 7), a), type = "l", lty = 1, col = "blue", main = "anomaly score")
graphics.off()
plot(dat2, type = "l")
lines(smooth.spline(time(dat2), dat2, spar = 0.75), col = "blue", lwd = 2)
lines(smooth.spline(time(dat2), dat2, spar = 1), col = "red", lwd = 2)
output <- TSSS::lsar(dat2, max.arorder = 30, ns0 = 500)
library(TSSS)
library(timsac)
# ns0:  basic local span
# Note that when setting large max.order, first data points corresponding to those lags are ignored.
# (for example: change max.order = 10 to 20)
output <- TSSS::lsar(dat2, max.arorder = 30, ns0 = 500)
output <- TSSS::lsar(dat2, max.arorder = 10, ns0 = 50)
output <- TSSS::lsar(dat2, max.arorder = 10, ns0 = 20)
output <- TSSS::lsar(dat2, max.arorder = 10, ns0 = 20)
output2 <- timsac::mlocar(dat, max.order = 10, span = 20, plot = FALSE)
output2 <- timsac::mlocar(dat, max.order = 10, span = 20, plot = FALSE)
output2 <- timsac::mlocar(dat2, max.order = 10, span = 20, plot = FALSE)
output2$init
output2$end
unique(output2$init)
graphics.off()
par(mfrow = c(1,1))
# use timsac::mlocar output !!
plot(dat2, type = "l")
abline(v = unique(output2$init), col = "blue", lwd = 1)
data <- read.csv(file = "wikipediatrend.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
str(data)
head(data)
# ----------
data$date <- as.Date(data$date)
# dat2 <- data
dat2 <- data %>% filter(date >= "2016-01-01", date < "2018-06-01")
# ------------------------------------------------------------------------------
# Assess Trend in data
# ------------------------------------------------------------------------------
graphics.off()
plot(dat2, type = "l")
lines(smooth.spline(time(dat2), dat2, spar = 0.75), col = "blue", lwd = 2)
lines(smooth.spline(time(dat2), dat2, spar = 1), col = "red", lwd = 2)
# ------------------------------------------------------------------------------
# Decompose time series to stationary subintervals and estimate local spectrum
# ------------------------------------------------------------------------------
library(TSSS)
library(timsac)
# ns0:  basic local span
# Note that when setting large max.order, first data points corresponding to those lags are ignored.
# (for example: change max.order = 10 to 20)
output <- TSSS::lsar(dat2, max.arorder = 10, ns0 = 20)
output2 <- timsac::mlocar(dat2, max.order = 10, span = 20, plot = FALSE)
output <- TSSS::lsar(dat2, max.arorder = 10, ns0 = 20)
data <- read.csv(file = "wikipediatrend.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
str(data)
head(data)
# ----------
data$date <- as.Date(data$date)
# dat2 <- data
dat2 <- data %>% filter(date >= "2016-01-01", date < "2018-06-01")
dat2 <- data %>% filter(date >= "2016-01-01", date < "2018-06-01") %>% dplyr::select(views)
graphics.off()
plot(dat2, type = "l")
lines(smooth.spline(time(dat2), dat2, spar = 0.75), col = "blue", lwd = 2)
lines(smooth.spline(time(dat2), dat2, spar = 1), col = "red", lwd = 2)
graphics.off()
plot(dat2, type = "l")
lines(smooth.spline(time(dat2), dat2, spar = 0.75), col = "blue", lwd = 2)
dat2 <- data %>% filter(date >= "2016-01-01", date < "2018-06-01") %>% dplyr::select(views)
dat2
dat2 <- data %>% filter(date >= "2016-01-01", date < "2018-06-01") %>% dplyr::select(views) %>% .[[1]]
graphics.off()
plot(dat2, type = "l")
lines(smooth.spline(time(dat2), dat2, spar = 0.75), col = "blue", lwd = 2)
lines(smooth.spline(time(dat2), dat2, spar = 1), col = "red", lwd = 2)
library(TSSS)
library(timsac)
# ns0:  basic local span
# Note that when setting large max.order, first data points corresponding to those lags are ignored.
# (for example: change max.order = 10 to 20)
output <- TSSS::lsar(dat2, max.arorder = 10, ns0 = 20)
output <- TSSS::lsar(dat2, max.arorder = 10, ns0 = 20)
output2 <- timsac::mlocar(dat2, max.order = 10, span = 20, plot = FALSE)
output2$init
output2$end
unique(output2$init)
graphics.off()
par(mfrow = c(1,1))
# use timsac::mlocar output !!
plot(dat2, type = "l")
abline(v = unique(output2$init), col = "blue", lwd = 1)
dat2 <- dat2 - smooth.spline(time(dat2), dat2, spar = 0.75)$y
graphics.off()
plot(dat2, type = "l")
summary(dat2)
dat2 <- dat2 + 70
( trans <- caret::BoxCoxTrans(dat2) )
dat3 <- predict(trans, newdata = dat2)
# ----------
graphics.off()
par(mfrow = c(2,1))
plot(dat2, type = "l")
plot(dat3, type = "l")
dat2 <- data %>% filter(date >= "2016-01-01", date < "2018-06-01") %>% dplyr::select(views) %>% .[[1]]
# ------------------------------------------------------------------------------
# Assess Trend in data
# ------------------------------------------------------------------------------
graphics.off()
plot(dat2, type = "l")
lines(smooth.spline(time(dat2), dat2, spar = 0.75), col = "blue", lwd = 2)
lines(smooth.spline(time(dat2), dat2, spar = 1), col = "red", lwd = 2)
# ------------------------------------------------------------------------------
# removing trend
# ------------------------------------------------------------------------------
dat2 <- dat2 - smooth.spline(time(dat2), dat2, spar = 0.75)$y
graphics.off()
plot(dat2, type = "l")
# ----------
# convert to positive value
summary(dat2)
( trans <- caret::BoxCoxTrans(dat2) )
summary(dat2)
dat2 <- dat2 + 70
# ------------------------------------------------------------------------------
# Box-Cox Transformation
# ------------------------------------------------------------------------------
( trans <- caret::BoxCoxTrans(dat2) )
dat3 <- predict(trans, newdata = dat2)
# ----------
graphics.off()
par(mfrow = c(2,1))
plot(dat2, type = "l")
plot(dat3, type = "l")
# ------------------------------------------------------------------------------
library(TSSS)
library(timsac)
# ns0:  basic local span
# Note that when setting large max.order, first data points corresponding to those lags are ignored.
# (for example: change max.order = 10 to 20)
output <- TSSS::lsar(dat3, max.arorder = 20, ns0 = 50)
output2 <- timsac::mlocar(dat3, max.order = 20, span = 50, plot = FALSE)
output <- TSSS::lsar(dat3, max.arorder = 20, ns0 = 50)
output2 <- timsac::mlocar(dat3, max.order = 20, span = 50, plot = FALSE)
# ----------
# start and end point  -->  should see timsac::mlocar output !!
output2$init
output2$end
unique(output2$init)
# ----------
graphics.off()
par(mfrow = c(1,1))
# use timsac::mlocar output !!
plot(dat3, type = "l")
abline(v = unique(output2$init), col = "blue", lwd = 1)
rm(list = ls())
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\00_basics\\05_anomaly_detection\\wikipediatrend")
# ------------------------------------------------------------------------------
# data:  wikipediatrend
# ------------------------------------------------------------------------------
data <- read.csv(file = "wikipediatrend.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
str(data)
head(data)
# ----------
data$date <- as.Date(data$date)
# dat2 <- data
dat2 <- data %>% filter(date >= "2016-01-01", date < "2018-06-01") %>% dplyr::select(views) %>% .[[1]]
ano <- AnomalyDetectionTs(dat2, direction = "pos")
dat2 <- data %>% filter(date >= "2016-01-01", date < "2018-06-01") %>% dplyr::select(views)
library(AnomalyDetection)
ano <- AnomalyDetectionTs(dat2, direction = "pos")
help(AnomalyDetection)
help("AnomalyDetectionTs")
AnomalyDetectionTs(raw_data, max_anoms=0.02, direction='both', plot=TRUE)
graphics.off()
dat2 <- data %>% filter(date >= "2016-01-01", date < "2018-06-01") %>% dplyr::select(date, views)
ano <- AnomalyDetectionTs(dat2, direction = "pos")
ano <- AnomalyDetectionTs(dat2, direction = "pos", plot = FALSE)
graphics.off()
ano$anoms
plot(ano, type = "l", main = "original validation series")
plot(dat2, type = "l", main = "original validation series")
abline(v = ano$anoms$timestamp, col = "blue", lty = 1)
ano$anoms$timestamp
abline(v = ano$anoms$timestamp, col = "blue", lty = 1)
v = ano$anoms$timestamp
abline(v = ano$anoms$timestamp)
idx <- which(dat2 %>% filter(date = ano$anoms$timestamp))
idx
dat2 %>% filter(date = ano$anoms$timestamp)
ano$anoms$timestamp
idx <- which(dat2 %>% filter(date == ano$anoms$timestamp))
dat2 %>% filter(date == ano$anoms$timestamp)
idx <- which(dat2 %>% filter(date == substring(ano$anoms$timestamp, 1, 10))
idx <- which(dat2 %>% filter(date == substring(ano$anoms$timestamp, 1, 10)))
idx <- which(dat2 %>% filter(date == substring(ano$anoms$timestamp, 1, 10)))
substring(ano$anoms$timestamp, 1, 10)
head(dat2)
dat2$date
dat2[,"date"] == substring(ano$anoms$timestamp, 1, 10)
substring(ano$anoms$timestamp, 1, 10)
dat2$date == substring(ano$anoms$timestamp, 1, 10)
substring(ano$anoms$timestamp, 1, 10)
dat2$date
idx <- which(dat2 %>% filter(date %in% substring(ano$anoms$timestamp, 1, 10)))
idx <- which(dat2 %>% filter(date %in% c(substring(ano$anoms$timestamp, 1, 10))))
dat2 %>% filter(date %in% c(substring(ano$anoms$timestamp, 1, 10)))
dat2$date %in% substring(ano$anoms$timestamp, 1, 10)
dat2$date
substring(ano$anoms$timestamp, 1, 10)
substring(dat2$date,1,10) %in% substring(ano$anoms$timestamp,1,10)
which(substring(dat2$date,1,10) %in% substring(ano$anoms$timestamp,1,10))
idx <- which(substring(dat2$date,1,10) %in% substring(ano$anoms$timestamp,1,10))
graphics.off()
par(mfrow = c(1,1))
plot(dat2, type = "l", main = "original validation series")
abline(v = idx, col = "blue", lty = 1)
graphics.off()
par(mfrow = c(1,1))
plot(c(dat2$views), type = "l", main = "original validation series")
abline(v = idx, col = "blue", lty = 1)
help("AnomalyDetectionTs")
plot(row_data)
plot(raw_data)
plot(raw_data, type = "l")
help("AnomalyDetectionVec")
