graphics.off()
par(mfrow = c(4,4))
for(i in 2:ncol(X)){
plot(X[,i] ~ X[,i-1], pch = ".", main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
points(X[,c(i,i-1)], cex = sqrt(lof_res), pch = 21, col = "red")
text(X[lof_res > 1.5,c(i, i-1)], labels = round(lof_res, 1)[lof_res > 1.5], pos = 3)
}
rownames(X)
graphics.off()
par(mfrow = c(4,4))
for(i in 2:ncol(X)){
plot(X[,i] ~ X[,i-1], pch = ".", main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
points(X[,c(i,i-1)], cex = sqrt(lof_res), pch = 21, col = "red")
text(X[lof_res > 1.5,c(i, i-1)], labels = rownames(X)[lof_res > 1.5], pos = 3)
}
rownames(X)[lof_res > 1.5]
rownames(X)[lof_res > 1.8]
lof_res > 1.8
graphics.off()
par(mfrow = c(4,4))
for(i in 2:ncol(X)){
plot(X[,i] ~ X[,i-1], pch = ".", main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
points(X[,c(i,i-1)], cex = sqrt(lof_res), pch = 21, col = "red")
text(X[lof_res > 2, c(i, i-1)], labels = rownames(X)[lof_res > 2], pos = 3)
}
graphics.off()
par(mfrow = c(4,4))
crit <- 2
for(i in 2:ncol(X)){
plot(X[,i] ~ X[,i-1], pch = ".", main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
points(X[,c(i,i-1)], cex = sqrt(lof_res), pch = 21, col = "red")
text(X[lof_res > crit, c(i, i-1)], labels = rownames(X)[lof_res > crit], pos = 3)
}
summary(lof_res)
k <- 2
lof_res <- lof(X, k = k)
# ----------
# LOF score
lof_res
summary(lof_res)
graphics.off()
par(mfrow = c(4,4))
crit <- 1.5
for(i in 2:ncol(X)){
plot(X[,i] ~ X[,i-1], pch = ".", main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
points(X[,c(i,i-1)], cex = sqrt(lof_res), pch = 21, col = "red")
text(X[lof_res > crit, c(i, i-1)], labels = rownames(X)[lof_res > crit], pos = 3)
}
graphics.off()
par(mfrow = c(3,3))
crit <- 1.5
for(i in 2:ncol(X)){
plot(X[,i] ~ X[,i-1], pch = ".", main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
points(X[,c(i,i-1)], cex = sqrt(lof_res), pch = 21, col = "red")
text(X[lof_res > crit, c(i, i-1)], labels = rownames(X)[lof_res > crit], pos = 3)
}
graphics.off()
par(mfrow = c(3,3))
crit <- 1.5
for(i in 2:ncol(X)){
plot(X[,i] ~ X[,i-1], pch = ".", main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
points(X[,c(i,i-1)], cex = sqrt(lof_res), pch = 21, col = "red")
text(X[lof_res > crit, c(i, i-1)], labels = rownames(X)[lof_res > crit], pos = 3)
}
graphics.off()
par(mfrow = c(3,3))
crit <- 1.5
for(i in 2:ncol(X)){
plot(X[,i] ~ X[,i-1], pch = ".", main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
points(X[,c(i,i-1)], cex = sqrt(lof_res) * 3, pch = 21, col = "red")
text(X[lof_res > crit, c(i, i-1)], labels = rownames(X)[lof_res > crit], pos = 3)
}
graphics.off()
par(mfrow = c(3,3))
crit <- 1.5
for(i in 2:ncol(X)){
plot(X[,i] ~ X[,i-1], pch = ".", main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
points(X[,c(i,i-1)], cex = sqrt(lof_res) * 1.5, pch = 21, col = "red")
text(X[lof_res > crit, c(i, i-1)], labels = rownames(X)[lof_res > crit], pos = 3)
}
graphics.off()
par(mfrow = c(3,3))
crit <- 1.5
for(i in 2:ncol(X)){
plot(X[,i] ~ X[,i-1], pch = ".", main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
points(X[,c(i,i-1)], cex = sqrt(lof_res) * 1.5, pch = 21, col = "red")
text(X[lof_res > crit, c(i, i-1)], labels = rownames(X)[lof_res > crit], pos = 3)
}
graphics.off()
par(mfrow = c(3,3))
crit <- 1.5
for(i in 2:ncol(X)){
plot(X[,i] ~ X[,i-1], pch = ".", main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
points(X[,c(i,i-1)], cex = sqrt(lof_res) * 1.5, pch = 21, col = "red")
text(X[lof_res > crit, c(i, i-1)], labels = rownames(X)[lof_res > crit], pos = 3)
}
dd
k <- 3
lof_res <- lof(X, k = k)
# ----------
# LOF score
lof_res
summary(lof_res)
hist(lof_res, breaks = 10)
# ----------
graphics.off()
par(mfrow = c(3,3))
k <- 3
lof_res <- lof(X, k = k)
lof_res
summary(lof_res)
hist(lof_res, breaks = 10)
# ----------
graphics.off()
par(mfrow = c(3,3))
crit <- 1.5
for(i in 2:ncol(X)){
plot(X[,i] ~ X[,i-1], pch = ".", main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
points(X[,c(i,i-1)], cex = sqrt(lof_res) * 2, pch = 21, col = "red")
text(X[lof_res > crit, c(i, i-1)], labels = rownames(X)[lof_res > crit], pos = 3)
}
e
# ----------
# LOF score
lof_res
summary(lof_res)
hist(lof_res, breaks = 10)
# ----------
graphics.off()
par(mfrow = c(3,3))
crit <- 1.8
for(i in 2:ncol(X)){
plot(X[,i] ~ X[,i-1], pch = ".", main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
points(X[,c(i,i-1)], cex = sqrt(lof_res) * 2, pch = 21, col = "red")
text(X[lof_res > crit, c(i, i-1)], labels = rownames(X)[lof_res > crit], pos = 3)
}
d
d
help(text)
k <- 5
lof_res <- lof(X, k = k)
# ----------
# LOF score
lof_res
summary(lof_res)
# ----------
# LOF score
lof_res
summary(lof_res)
hist(lof_res, breaks = 10)
# ----------
graphics.off()
par(mfrow = c(3,3))
crit <- 1.5
for(i in 2:ncol(X)){
plot(X[,i] ~ X[,i-1], pch = ".", main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
points(X[,c(i,i-1)], cex = sqrt(lof_res) * 2, pch = 21, col = "red")
text(X[lof_res > crit, c(i, i-1)], labels = rownames(X)[lof_res > crit], pos = 3)
}
d
graphics.off()
par(mfrow = c(3,3))
crit <- 1.5
for(i in 2:ncol(X)){
plot(X[,i] ~ X[,i-1], pch = ".", main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
points(X[,c(i,i-1)], cex = sqrt(lof_res) * 2, pch = 21, col = "red")
text(X[lof_res > crit, c(i, i-1)], labels = rownames(X)[lof_res > crit], pos = 3)
}
d
ddd
# ------------------------------------------------------------------------------
# Select variables and transform data
# ------------------------------------------------------------------------------
# select 15 variables
cc <- c("Min.Price", "Price", "Max.Price", "MPG.city", "MPG.highway", "EngineSize", "Horsepower", "RPM", "Rev.per.mile",
"Fuel.tank.capacity", "Length", "Wheelbase", "Width", "Turn.circle", "Weight")
Xc <- Cars93[,cc]
rownames(Xc) <- Cars93[,"Make"]
head(Xc)
# ----------
# column is Make and row is variable
summary(Xc)
# ------------------------------------------------------------------------------
# Anomaly Detection:  basd on nonlinear model  (Support Vector Machine)
#   - Nonlinear transformation the data by RBF Kernel
# ------------------------------------------------------------------------------
X <- scale(Xc)
# ----------
library(kernlab)
sigma <- 0.01
rbf <- rbfdot(sigma = sigma)
# approximately parameters for proportions for anomaly detected data
nu <- 0.05
ocsvm <- ksvm(X, type = "one-svc", kernel = rbf, nu = nu)
# support vectors (alpha vector)
ocsvm@alpha
# ----------
# anomaly detected data  (corresponding to support vector)
ocsvm@alphaindex
fitted(ocsvm)
X[ocsvm@alphaindex,]
graphics.off()
par(mfrow = c(3,3))
for(i in 2:ncol(Xc)){
plot(X[,i] ~ X[,i-1], pch = 21, bg = colorcode, main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
text(X[colorcode == 1, c(i, i-1)], labels = rownames(X)[colorcode == 1], pos = 3)
}
colorcode <- rep(0, nrow(X))
colorcode[ocsvm@alphaindex] <- 1
graphics.off()
par(mfrow = c(3,3))
for(i in 2:ncol(Xc)){
plot(X[,i] ~ X[,i-1], pch = 21, bg = colorcode, main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
text(X[colorcode == 1, c(i, i-1)], labels = rownames(X)[colorcode == 1], pos = 3)
}
ocsvm@alphaindex
colorcode <- rep(0, nrow(X))
colorcode[ocsvm@alphaindex] <- 1
graphics.off()
par(mfrow = c(3,2))
for(i in 2:ncol(Xc)){
plot(X[,i] ~ X[,i-1], pch = 21, bg = colorcode, main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
text(X[colorcode == 1, c(i, i-1)], labels = rownames(X)[colorcode == 1], pos = 3)
}
dd
dd
colorcode <- rep(0, nrow(X))
colorcode[ocsvm@alphaindex] <- 1
graphics.off()
par(mfrow = c(2,2))
for(i in 2:ncol(Xc)){
plot(X[,i] ~ X[,i-1], pch = 21, bg = colorcode, main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
text(X[colorcode == 1, c(i, i-1)], labels = rownames(X)[colorcode == 1], pos = 1)
}
d
d
# ----------
colorcode <- rep(0, nrow(X))
colorcode[ocsvm@alphaindex] <- 1
graphics.off()
par(mfrow = c(2,2))
for(i in 2:ncol(Xc)){
plot(X[,i] ~ X[,i-1], pch = 21, bg = colorcode, main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
text(X[colorcode == 1, c(i, i-1)], labels = rownames(X)[colorcode == 1], pos = 1)
}
colorcode
# ----------
colorcode <- rep(0, nrow(X))
colorcode[ocsvm@alphaindex] <- 1
graphics.off()
par(mfrow = c(2,2))
for(i in 2:ncol(Xc)){
plot(X[,i] ~ X[,i-1], pch = 21, bg = colorcode, main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
text(X[colorcode == 1, c(i, i-1)] + 0.1, labels = rownames(X)[colorcode == 1])
}
a + b
colorcode <- rep(0, nrow(X))
colorcode[ocsvm@alphaindex] <- 1
graphics.off()
par(mfrow = c(2,2))
for(i in 2:ncol(X)){
plot(X[,i] ~ X[,i-1], pch = 21, bg = colorcode, main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
text(X[colorcode == 1, c(i, i-1)] + 0.1, labels = rownames(X)[colorcode == 1])
}
graphics.off()
par(mfrow = c(2,2))
# for(i in 2:ncol(X)){
for(i in 2:5){
plot(X[,i] ~ X[,i-1], pch = 21, bg = colorcode, main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
text(X[colorcode == 1, c(i, i-1)] + 0.1, labels = rownames(X)[colorcode == 1])
}
i <- 2
plot(X[,i] ~ X[,i-1], pch = 21, bg = colorcode, main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
X[colorcode == 1, c(i, i-1)] + 0.1
rownames(X)[colorcode == 1]
text(X[colorcode == 1, c(i, i-1)] + 0.1, labels = rownames(X)[colorcode == 1])
graphics.off()
par(mfrow = c(2,2))
# for(i in 2:ncol(X)){
for(i in 2:5){
plot(X[,i] ~ X[,i-1], pch = 21, bg = colorcode, main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
text(X[colorcode == 1, c(i-1, i)] + 0.1, labels = rownames(X)[colorcode == 1])
}
# select 15 variables
cc <- c("Min.Price", "Price", "Max.Price", "MPG.city", "MPG.highway", "EngineSize", "Horsepower", "RPM", "Rev.per.mile",
"Fuel.tank.capacity", "Length", "Wheelbase", "Width", "Turn.circle", "Weight")
Xc <- t(scale(Cars93[,cc]))
colnames(Xc) <- t(Cars93[,"Make"])
head(Xc)
# ----------
# column is Make and row is variable
summary(t(Xc))
# ------------------------------------------------------------------------------
# Anomaly Decetion by Local Outlier Factor (LOF)
#   - LOF compares the local density of an point to the local densities of its neighbors.
#     Points that have a substantially lower density than their neighbors are considered outliers.
#     A LOF score of approximately 1 indicates that density around the point is comparable to its neighbors.
#     Scores significantly larger than 1 indicate outliers.
#   - Note: If there are more than k duplicate points in the data, then lof can become NaN
#     caused by an infinite local density.
#     In this case we set lof to 1.
# ------------------------------------------------------------------------------
library(dbscan)
X <- t(Xc)
# size of neighbouhood
k <- 5
lof_res <- lof(X, k = k)
# ----------
# LOF score
lof_res
summary(lof_res)
hist(lof_res, breaks = 10)
# ----------
graphics.off()
par(mfrow = c(3,3))
crit <- 1.5
for(i in 2:ncol(X)){
plot(X[,i] ~ X[,i-1], pch = ".", main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
points(X[,c(i-1,i)], cex = sqrt(lof_res) * 2, pch = 21, col = "red")
text(X[lof_res > crit, c(i-1, i)], labels = rownames(X)[lof_res > crit], pos = 3)
}
graphics.off()
par(mfrow = c(3,3))
crit <- 1.5
for(i in 2:ncol(X)){
plot(X[,i] ~ X[,i-1], pch = ".", main = paste0(colnames(X)[i], " : ", colnames(X)[i-1]))
points(X[,c(i-1,i)], cex = sqrt(lof_res) * 2, pch = 21, col = "red")
text(X[lof_res > crit, c(i-1, i)] + 0.1, labels = rownames(X)[lof_res > crit])
}
X <- t(Xc)
( h <- c(dpik(X$weight), dpik(X$height)) )
names(X)
colnames(X)
( h <- c(dpik(X$Min.Price), dpik(X$Price), dpik(X$Max.Price), dpik(X$MPG.city), dpik(X$MPG.highway),
dpik(X$EngineSize), dpik(X$HorsePower), dpik(X$RPM), dpik(X$Rev.per.mile), dpik(X$Fuel.tank.capacity),
dpik(X$Length), dpik(X$sheelbase), dpik(X$width), dpik(X$Turn.circle), dpik(X$Weight)) )
X$Min.Price
X <- data.frame(t(Xc))
# select a bandwidth for Kernel Density estimation
( h <- c(dpik(X$Min.Price), dpik(X$Price), dpik(X$Max.Price), dpik(X$MPG.city), dpik(X$MPG.highway),
dpik(X$EngineSize), dpik(X$HorsePower), dpik(X$RPM), dpik(X$Rev.per.mile), dpik(X$Fuel.tank.capacity),
dpik(X$Length), dpik(X$sheelbase), dpik(X$width), dpik(X$Turn.circle), dpik(X$Weight)) )
dpik(X$Min.Price)
dpik(X$Price)
dpik(X$Max.Price)
dpik(X$MPG.city)
dpik(X$MPG.highway)
dpik(X$EngineSize)
dpik(X$HorsePower)
X$HorsePower
dpik(X$Horsepower)
( h <- c(dpik(X$Min.Price), dpik(X$Price), dpik(X$Max.Price), dpik(X$MPG.city), dpik(X$MPG.highway),
dpik(X$EngineSize), dpik(X$Horsepower), dpik(X$RPM), dpik(X$Rev.per.mile), dpik(X$Fuel.tank.capacity),
dpik(X$Length), dpik(X$sheelbase), dpik(X$width), dpik(X$Turn.circle), dpik(X$Weight)) )
dpik(X$RPM)
dpik(X$Rev.per.mile)
dpik(X$Fuel.tank.capacity)
dpik(X$Length)
dpik(X$sheelbase)
# select a bandwidth for Kernel Density estimation
( h <- c(dpik(X$Min.Price), dpik(X$Price), dpik(X$Max.Price), dpik(X$MPG.city), dpik(X$MPG.highway),
dpik(X$EngineSize), dpik(X$Horsepower), dpik(X$RPM), dpik(X$Rev.per.mile), dpik(X$Fuel.tank.capacity),
dpik(X$Length), dpik(X$wheelbase), dpik(X$width), dpik(X$Turn.circle), dpik(X$Weight)) )
dpik(X$wheelbase)
X$wheelbase
colnames(X)
dpik(X$Wheelbase)
# select a bandwidth for Kernel Density estimation
( h <- c(dpik(X$Min.Price), dpik(X$Price), dpik(X$Max.Price), dpik(X$MPG.city), dpik(X$MPG.highway),
dpik(X$EngineSize), dpik(X$Horsepower), dpik(X$RPM), dpik(X$Rev.per.mile), dpik(X$Fuel.tank.capacity),
dpik(X$Length), dpik(X$Wheelbase), dpik(X$Width), dpik(X$Turn.circle), dpik(X$Weight)) )
est <- bkde2D(X, bandwidth = h, gridsize = c(10^3, 10^3))
names(est)
# 2-dimenational kernel density estimation
est <- bkde2D(X, bandwidth = h, gridsize = c(10^3, 10^3))
names(est)
d <- list(x = est$x1, y = est$x2, z = est$fhat)
est <- bkde2D(X, bandwidth = h, gridsize = c(rep(10^3, length(h))))
length(h)
rep(10^3, length(h)
rep(10^3, length(h))
rep(10^3, length(h))
est <- bkde2D(X, bandwidth = h, gridsize = c(rep(10^3, length(h))))
X
dim(X)
est <- bkde2D(as.matrix(X), bandwidth = h, gridsize = c(rep(10^3, length(h))))
names(est)
est$x1
est$fhat
names(est$fhat)
est$fhat
dim(est$fhat)
t(X)
est <- bkde2D(t(X), bandwidth = h, gridsize = c(rep(10^3, length(h))))
help(bkde2D)
est <- bkde(X, bandwidth = h, gridsize = c(rep(10^3, length(h))))
est <- bkde(X)
est <- bkde(X, bandwidth = h)
est <- bkde(as.matrix(X), bandwidth = h)
est <- bkde(X[,1:3], bandwidth = h[1:3])
data(geyser, package="MASS")
x <- geyser$duration
est <- bkde(x, bandwidth=0.25)
plot(est, type="l")
data(geyser, package="MASS")
x <- geyser$duration
est <- bkde(x, bandwidth=0.25)
plot(est, type="l")
x
library(ks)
kde(x=X, compute.cont=TRUE, xmin=c(-5,-5), xmax=c(5,5), bgridsize=c(151,151))
est <- kde(x=X, compute.cont=TRUE)
est <- kde(x = X[,1:3])
names(est)
plot(est)
install.packages("misc3d", dep = T)
plot(est)
est <- kde(x = X[,1:5])
names(est)
plot(est)
est$binned
est$H
est$H
est$estimate
names(est)
est$gridded
est$w
names(est$estimate)
str(est$estimate)
K <- est$estimate
n <- nrow(X)
# removing self data
aa <- colSums(K) - diag(K)
# set lower limit
lowerLim <- 10^(-20)
aa[(aa < lowerLim)] <- lowerLim
aa <- colSums(K) - diag(K)
K
dim(est$estimate)
dim(est$estimate)
aa <- K <- est$estimate
a <- (-1) * log(aa / (n - 1))
a
str(a)
rm(list = ls())
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\00_basics\\05_anomaly_detection\\01_異常検知\\cars93")
# ------------------------------------------------------------------------------
# data:  Cars93
#    - data of 93 type cars
#    - MPG: mile per gallon
# ------------------------------------------------------------------------------
library(MASS)
str(Cars93)
car::some(Cars93)
# ------------------------------------------------------------------------------
# Select variables and transform data
# ------------------------------------------------------------------------------
# select 15 variables
cc <- c("Min.Price", "Price", "Max.Price", "MPG.city", "MPG.highway", "EngineSize", "Horsepower", "RPM", "Rev.per.mile",
"Fuel.tank.capacity", "Length", "Wheelbase", "Width", "Turn.circle", "Weight")
Xc <- t(scale(Cars93[,cc]))
colnames(Xc) <- t(Cars93[,"Make"])
head(Xc)
# ----------
# column is Make and row is variable
summary(t(Xc))
library(mclust)
X <- t(Xc)
# ----------
result <- Mclust(X)
result$BIC
Xc
names(Xc)
colnames(Xc)
rownames(Xc)
result$BIC
print(summary(result, parameters = TRUE))
result$BIC
plot(result)
X <- t(Xc)[,1:10]
# ----------
result <- Mclust(X)
result$BIC
print(summary(result, parameters = TRUE))
print(summary(result, parameters = TRUE))
plot(result)
# mclust select number of clusters by BIC
library(mclust)
# for demonstration, take only first 1-7 variables
X <- t(Xc)[,1:7]
# ----------
result <- Mclust(X)
result$BIC
print(summary(result, parameters = TRUE))
plot(result)
XX <- cdens(modelName = result$modelName, X, parameters = result$parameters)
# mixing proportions
( pi <- result$parameters$pro )
# compute anomaly scores
a <- -log(as.matrix(XX) %*% as.matrix(pi))
plot(a, ylab = "anomaly score")
graphics.off()
par(mfrow = c(1,1))
plot(a, ylab = "anomaly score")
a[a >= 4]
rownames(X)[a >= 4]
abline(v = 4, lty = 2)
plot(a, ylab = "anomaly score")
abline(h = 4, lty = 2)
rownames(X)[a >= 4]
