library(MASS)
str(road)
car::some(road)
car::some(road)
library(car)
formula <- ~ drivers + popden + rural + temp + fuel + deaths
scatterplotMatrix(formula, data = road,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
X <- road / road$drivers
X <- road
X$deaths <- X / X$drivers
X$fuel <- X / X$fuels
# remove population and log
X <- as.matrix(log(X[,-2] + 1))
X <- road
X$deaths <- X / X$drivers
X$fuel <- X / X$fuel
# remove population and log
X <- as.matrix(log(X[,-2] + 1))
head(road)
library(car)
formula <- ~ popden + rural + temp + fuel + deaths
scatterplotMatrix(formula, data = X,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
X <- road
X$deaths <- X / X$drivers
X$fuel <- X / X$fuel
# remove drivers and log
X <- as.matrix(log(X[,-2] + 1))
library(car)
formula <- ~ popden + rural + temp + fuel + deaths
scatterplotMatrix(formula, data = X,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
X <- road
X$deaths <- X / X$drivers
X$fuel <- X / X$fuel
# remove drivers and log
X <- as.matrix(log(X[,-2] + 1))
library(car)
formula <- ~ popden + rural + temp + fuel + deaths
scatterplotMatrix(formula, data = X,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
X
library(MASS)
str(road)
car::some(road)
library(car)
formula <- ~ drivers + popden + rural + temp + fuel + deaths
scatterplotMatrix(formula, data = road,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
X <- road
X$deaths <- X$deaths / X$drivers
X$fuel <- X$fuel / X$drivers
# remove drivers and log
X <- as.matrix(log(X[,-2] + 1))
library(car)
formula <- ~ popden + rural + temp + fuel + deaths
scatterplotMatrix(formula, data = X,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
mx <- colMeans(X)
mx
Xc <- X - matrix(1, nrow(X), 1) %*% mx
Xc
matrix(1, nrow(X), 1)
matrix(1, nrow(X), 1) %*% mx
( Sx <- t(Xc) %*% Xc / nrow(X) )
(Xc %*% solve(Sx)) * Xc)
( a < - rowSums((Xc %*% solve(Sx)) * Xc) )
( a < - rowSums((Xc %*% solve(Sx)) * Xc) )
( a < - rowSums((Xc %*% solve(Sx)) * Xc)
( a < - rowSums((Xc %*% solve(Sx)) * Xc) )
( a < - rowSums((Xc %*% solve(Sx)) * Xc) )
(Xc %*% solve(Sx)) * Xc
( a < - rowSums((Xc %*% solve(Sx)) * Xc) )
rowSums((Xc %*% solve(Sx)) * Xc)
( a <- rowSums((Xc %*% solve(Sx)) * Xc) )
a <- a / ncol(X)
plot(a, xlab = "index", ylab = "anomaly socre", ylim = c(-1, 30) / ncol(X))
# threthold is set as 1
n <- nrow(road)
lines(0:n, rep(1, length(0:n)), col = "red", lty = 2)
rownames(X)[a > 1]
plot(a, xlab = "index", ylab = "anomaly socre", ylim = c(-1, 30) / ncol(X))
# threthold is set as 1
n <- nrow(road)
lines(0:n, rep(1, length(0:n)), col = "red", lty = 2)
Nd <- 6
M <- ncol(X)
a
order(a)
a[order(a)]
sort(a, decreasing = T)
10 * log10(sum(Md / sort(a, decreasing = T)[1:Nd]) / Nd)
Nd <- 6
Md <- ncol(X)
10 * log10(sum(Md / sort(a, decreasing = T)[1:Nd]) / Nd)
Nd <- 1
Md <- 1
SN <- 10 * log10(sum(Md / sort(a, decreasing = T)[1:Nd]) / Nd)
( SN <- 10 * log10(sum(Md / sort(a, decreasing = T)[1:Nd]) / Nd) )
xc_prime <- Xc["Calif", ]
SN1 <- 10 * log10(xc_prime ^ 2 / diag(Sx))
( SN1 <- 10 * log10(xc_prime ^ 2 / diag(Sx)) )
a
( aq <- rowSums((Xc %*% solve(Sx)) * Xc) )
# ----------
# average anomaly score by variable
a <- aq / ncol(X)
plot(a, xlab = "index", ylab = "anomaly socre", ylim = c(-1, 30) / ncol(X))
# threthold is set as 1
n <- nrow(road)
lines(0:n, rep(1, length(0:n)), col = "red", lty = 2)
rownames(X)[a > 1]
sort(a, decreasing = T)[1:Nd])
sort(a, decreasing = T)[1:Nd]
idx <- which(sort(a, decreasing = T)[1:Nd])
idx
idx <- unname(sort(a, decreasing = T)[1:Nd]))
idx
sort(a, decreasing = T)[1:Nd])
sort(a, decreasing = T)[1:Nd]
idx <- unname(sort(a, decreasing = T)[1:Nd])
idx
idx <- name(sort(a, decreasing = T)[1:Nd])
idx <- names(sort(a, decreasing = T)[1:Nd])
idx
aq
( aq <- rowSums((Xc %*% solve(Sx)) * Xc) )
xc_prime <- Xc["Calif", ]
xc_prime
Sx
# anomaly score
( a <- rowSums((Xc %*% solve(Sx)) * Xc) )
# ----------
# average anomaly score by variable
a <- a / ncol(X)
plot(a, xlab = "index", ylab = "anomaly socre", ylim = c(-1, 30) / ncol(X))
# threthold is set as 1
n <- nrow(road)
lines(0:n, rep(1, length(0:n)), col = "red", lty = 2)
rownames(X)[a > 1]
barplot(SN1)
# ------------------------------------------------------------------------------
# Anomaly Detection based on distance metric
# ------------------------------------------------------------------------------
# KernSmooth is able to estimate Kernel Density up to 2 dimension
library(KernSmooth)
X <- data[, c("weight", "height")]
# select a bandwidth for Kernel Density estimation
( h <- c(dpik(X$weight), dpik(X$height)) )
# ----------
# 2-dimenational kernel density estimation
est <- bkde2D(X, bandwidth = h, gridsize = c(10^3, 10^3))
names(est)
# fhat:  matrix of density estimates over the mesh induced by x1 and x2
d <- list(x = est$x1, y = est$x2, z = est$fhat)
# ----------
image(d, col = terrain.colors(7), xlim = c(35, 110), ylim = c(145, 200))
contour(d, add = T)
rm(list = ls())
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\00_basics\\05_anomaly_detection\\davis")
# ------------------------------------------------------------------------------
# data:  Davis
# ------------------------------------------------------------------------------
data <- read.csv("Davis.txt", header = T, sep = "\t")
str(data)
car::some(data)
# ------------------------------------------------------------------------------
# Anomaly Detection based on distance metric
# ------------------------------------------------------------------------------
# KernSmooth is able to estimate Kernel Density up to 2 dimension
library(KernSmooth)
X <- data[, c("weight", "height")]
# select a bandwidth for Kernel Density estimation
( h <- c(dpik(X$weight), dpik(X$height)) )
# ----------
# 2-dimenational kernel density estimation
est <- bkde2D(X, bandwidth = h, gridsize = c(10^3, 10^3))
names(est)
# fhat:  matrix of density estimates over the mesh induced by x1 and x2
d <- list(x = est$x1, y = est$x2, z = est$fhat)
# ----------
image(d, col = terrain.colors(7), xlim = c(35, 110), ylim = c(145, 200))
contour(d, add = T)
data <- read.csv("Davis.txt", header = T, sep = "\t")
str(data)
car::some(data)
rm(list = ls())
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\00_basics\\05_anomaly_detection\\davis")
rm(list = ls())
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\00_basics\\05_anomaly_detection\\01_異常検知\\davis")
# ------------------------------------------------------------------------------
# data:  Davis
# ------------------------------------------------------------------------------
data <- read.csv("Davis.txt", header = T, sep = "\t")
str(data)
car::some(data)
# ------------------------------------------------------------------------------
# Anomaly Detection based on distance metric
# ------------------------------------------------------------------------------
# KernSmooth is able to estimate Kernel Density up to 2 dimension
library(KernSmooth)
X <- data[, c("weight", "height")]
# select a bandwidth for Kernel Density estimation
( h <- c(dpik(X$weight), dpik(X$height)) )
# ----------
# 2-dimenational kernel density estimation
est <- bkde2D(X, bandwidth = h, gridsize = c(10^3, 10^3))
names(est)
# fhat:  matrix of density estimates over the mesh induced by x1 and x2
d <- list(x = est$x1, y = est$x2, z = est$fhat)
# ----------
image(d, col = terrain.colors(7), xlim = c(35, 110), ylim = c(145, 200))
contour(d, add = T)
( h <- c(dpik(X$weight), dpik(X$height)) )
est <- bkde2D(X, bandwidth = h, gridsize = c(10^3, 10^3))
names(est)
d <- list(x = est$x1, y = est$x2, z = est$fhat)
image(d, col = terrain.colors(7), xlim = c(35, 110), ylim = c(145, 200))
contour(d, add = T)
n <- nrow(X)
# removing self data
aa <- colSums(K) - diag(K)
# set lower limit
lowerLim <- 10^(-20)
aa[(aa < lowerLim)] <- lowerLim
# ----------
# anomaly score
a <- (-1) * log(aa / (n - 1))
graphics.off()
plot(a, xlab = "sample ID", ylab = "anomaly score")
M <- 2
dis1 <- (as.matrix(dist(X[,1])) / h[1])^2
dis2 <- (as.matrix(dist(X[,2])) / h[2])^2
dis <- dis1 + dis2
dim(dis)
K <- prod(h)^(-0.5) / (2 * pi)^(M / 2) * exp( -0.5 * dis )
# K <- est$fhat
# K <- as.kernelMatrix(crossprod(t(X)))
# ----------
n <- nrow(X)
# removing self data
aa <- colSums(K) - diag(K)
# set lower limit
lowerLim <- 10^(-20)
aa[(aa < lowerLim)] <- lowerLim
# ----------
# anomaly score
a <- (-1) * log(aa / (n - 1))
graphics.off()
plot(a, xlab = "sample ID", ylab = "anomaly score")
image(d, col = terrain.colors(7), xlim = c(35, 110), ylim = c(145, 200))
contour(d, add = T)
pints(x)
points(x)
points(X)
image(d, col = terrain.colors(7), xlim = c(35, 110), ylim = c(145, 200))
contour(d, add = T)
a <- (-1) * log(aa / (n - 1))
graphics.off()
plot(a, xlab = "sample ID", ylab = "anomaly score")
idx <- a >= 10
idx <- a > 10
idx
idx <- a > 10
colorcode <- rep(0, length(a))
colorcode[idx] <- 1
# ----------
# plot on kernel density
image(d, col = terrain.colors(7), xlim = c(35, 110), ylim = c(145, 200))
contour(d, add = T)
colorcode <- rep(0, length(a))
colorcode[idx] <- 1
points(X, pch = 21, bg = colorcode)
idx
sum(idx)
colorcode[idx] <- 1
colorcode
idx
idx <- which(a > 10)
idx
idx <- which(a > 10)
colorcode <- rep(0, length(a))
colorcode[idx] <- 1
colorcode
points(X, pch = 21, bg = colorcode)
( idx <- which(a > 10) )
colorcode <- rep(0, length(a))
colorcode[idx] <- 1
colorcode
points(X[idx,], pch = 21)
image(d, col = terrain.colors(7), xlim = c(35, 110), ylim = c(145, 200))
contour(d, add = T)
graphics.off()
image(d, col = terrain.colors(7), xlim = c(35, 110), ylim = c(145, 200))
contour(d, add = T)
points(X[idx,], pch = 21)
X[idx,]
graphics.off()
image(d, col = terrain.colors(7), xlim = c(0, 170), ylim = c(0, 200))
contour(d, add = T)
points(X[idx,], pch = 21)
graphics.off()
image(d, col = terrain.colors(7), xlim = c(30, 170), ylim = c(50, 200))
contour(d, add = T)
points(X, pch = 21, bg = colorcode)
