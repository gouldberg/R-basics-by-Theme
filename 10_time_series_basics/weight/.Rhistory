matplot(rw_mat, type = "l")
abline(h = mu, col = "black", lwd = 2)
# ------------------------------------------------------------------------------
# random walk with drift
# ------------------------------------------------------------------------------
# random walk
w <- rnorm(n = 500, mean = mu, sd = sd)
rw <- cumsum(w)
# ----------
# random walk with drift looks like trend series
# x(t) = drift + sum from j = 1 to t ( w(j) )
rw_drift <- cumsum(w + drift)
# ------------------------------------------------------------------------------
# deterministic trend
# ------------------------------------------------------------------------------
phi <- c(0.5, 0.3)
p <- length(phi)
theta <- c(0.3, 0.2)
q <- length(theta)
pdq <- list(order = c(p, 0, q), ar = phi, ma = theta)
arma_noise <- arima.sim(n, model = pdq, sd = sd)
dt <- mu + drift * 1:n + arma_noise
# ------------------------------------------------------------------------------
# plot time series
# ------------------------------------------------------------------------------
graphics.off()
par(mfrow = c(1,1))
plot(rw_drift, type = "l", lty = 1, lwd = 2, col = "blue", main = "random walk (black), random walk with drift (blue), deterministic trend (red)",
cex.main = 1.2, ylim = c(-40, 80))
lines(rw, col = "black", lwd = 2)
lines(dt, col = "red", lwd = 2)
abline(h = mu, col = "black", lty = 1, lwd = 1)
abline(a = mu, b = drift, col = "blue", lty = 2)
sarima(rw_drift, p = 0, d = 2, q = 2)
sarima(rw, p = 0, d = 1, q = 1)
rw_mat <- sapply(1:100, function(x) cumsum(rnorm(n = n, mean = mu, sd = sd)))
matplot(rw_mat, type = "l")
abline(h = mu, col = "black", lwd = 2)
rw_drift2 <- diff(diff(rw_drift))
plot(rw_drfit2, type = "l")
plot(rw_drift2, type = "l")
forecast::ndiffs(rw_drift)
astsa::acf2(rw_drift2)
rw_drift1 <- diff(rw_drift)
plot(rw_drift1, type = "l")
plot(rw_drift2, type = "l")
astsa::acf2(rw_drift2)
astsa::acf2(rw_drift1)
plot(rw_drift_d, type = "l")
rw_d <- diff(rw)
dt_d <- diff(dt)
rw_drift_d <- diff(rw_drift)
# ----------
# all the differened time series are white noise
graphics.off()
par(mfrow = c(2,2))
plot(rw_d, type = "l")
plot(dt_d, type = "l")
plot(rw_drift_d, type = "l")
tseries::adf.test(rw_drift, k = 0)
tseries::adf.test(rw_drift, k = 10)
tseries::adf.test(rw_drift, k = 0)
tseries::adf.test(rw_drift)
tseries::adf.test(rw)
tseries::adf.test(dt)
tseries::adf.test(w)
tseries::adf.test(w)
tseries::adf.test(dt)
tseries::adf.test(rw)
tseries::adf.test(rw_drift)
forecast::ndiffs(rw_drift_d)
astsa::acf2(rw_drift_d)
sarima(rw_drift, p = 0, d = 1, q = 0)
astsa::acf2(dt_d)
sarima(dt, p = 1, d = 1, q = 2)
sarima(dt, p = 1, d = 1, q = 1)
sarima(dt, p = 1, d = 1, q = 0)
sarima(dt, p = 1, d = 1, q = 1)
sarima(dt, p = 0, d = 1, q = 1)
sarima(dt, p = 0, d = 1, q = 2)
sarima(dt, p = 1, d = 1, q = 2)
sarima(dt, p = 1, d = 1, q = 1)
sarima(dt, p = 1, d = 1, q = 1)
n <- 500
mu <- 0
sd <- 1
drift <- 0.1
# ------------------------------------------------------------------------------
# random walk
# ------------------------------------------------------------------------------
rw_mat <- sapply(1:100, function(x) cumsum(rnorm(n = n, mean = mu, sd = sd)))
matplot(rw_mat, type = "l")
abline(h = mu, col = "black", lwd = 2)
# ------------------------------------------------------------------------------
# random walk with drift
# ------------------------------------------------------------------------------
# random walk
w <- rnorm(n = 500, mean = mu, sd = sd)
rw <- cumsum(w)
# ----------
# random walk with drift looks like trend series
# x(t) = drift + sum from j = 1 to t ( w(j) )
rw_drift <- cumsum(w + drift)
# ------------------------------------------------------------------------------
# deterministic trend
# ------------------------------------------------------------------------------
phi <- c(0.5, 0.3)
p <- length(phi)
theta <- c(0.3, 0.2)
q <- length(theta)
pdq <- list(order = c(p, 0, q), ar = phi, ma = theta)
arma_noise <- arima.sim(n, model = pdq, sd = sd)
dt <- mu + drift * 1:n + arma_noise
# ------------------------------------------------------------------------------
# plot time series
# ------------------------------------------------------------------------------
graphics.off()
par(mfrow = c(1,1))
plot(rw_drift, type = "l", lty = 1, lwd = 2, col = "blue", main = "random walk (black), random walk with drift (blue), deterministic trend (red)",
cex.main = 1.2, ylim = c(-40, 80))
lines(rw, col = "black", lwd = 2)
lines(dt, col = "red", lwd = 2)
abline(h = mu, col = "black", lty = 1, lwd = 1)
abline(a = mu, b = drift, col = "blue", lty = 2)
sarima(dt, p = 1, d = 1, q = 1)
astsa::acf2(dt)
astsa::acf2(dt_d)
rw_d <- diff(rw)
dt_d <- diff(dt)
rw_drift_d <- diff(rw_drift)
astsa::acf2(dt_d)
sarima(dt, p = 2, d = 1, q = 3)
sarima(dt, p = 2, d = 1, q = 1)
sarima(dt, p = 2, d = 1, q = 2)
sarima(dt, p = 2, d = 1, q = 3)
sarima(dt, p = 3, d = 1, q = 3)
sarima(dt, p = 1, d = 1, q = 3)
sarima(dt, p = 1, d = 1, q = 0)
sarima(dt, p = 1, d = 1, q = 3)
dt_d2 <- resid(lm(dt ~ time(dt)))
astsa::acf2(dt_d2)
plot(dt_d2, type = "l")
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\00_basics\\10_time_series_basics\\sales")
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  sales
# ------------------------------------------------------------------------------
dat <- read.csv("sales.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
str(dat)
car::some(dat)
# ----------
colnames(dat) <- c("month", "fabrics", "machinery", "fuel")
# ------------------------------------------------------------------------------
# data exploration:  plot time series
# ------------------------------------------------------------------------------
graphics.off()
par(mfrow = c(1,1))
MTS::MTSplot(dat[,2:4])
# ------------------------------------------------------------------------------
# data exploration:  smoothing  (spline smoothing)
# ------------------------------------------------------------------------------
ts.plot(dat$fabrics, type = "b")
lines(smooth.spline(dat$fabrics, spar = 0.25), lwd = 2, col = "darkgray")
lines(smooth.spline(dat$fabrics, spar = 0.5), lwd = 2, col = "orange")
lines(smooth.spline(dat$fabrics, spar = 0.75), lwd = 2, col = "red")
lines(smooth.spline(dat$fabrics, spar = 1), lwd = 2, col = "blue")
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\unemp")
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  unemp
# ------------------------------------------------------------------------------
data("unemp", package = "astsa")
unemp <- read.table("unemp.txt", sep = "\t", header = T, stringsAsFactors = F)
unemp <- as.ts(unemp, start = 1948, end = 1978, frequency = 12)
unemp_df <- diff(unemp)
unemp_dt <- resid(lm(unemp ~ time(unemp)))
acf2(unemp_df, max.lag = 200)
smod <- sarima(unemp, p = 0, d = 1, q = 0, P = 2, D = 0, Q = 2, S = 12)
smod <- sarima(unemp, p = 0, d = 1, q = 0, P = 2, D = 1, Q = 2, S = 12)
acf2(unemp_df, max.lag = 200)
smod <- sarima(unemp, p = 0, d = 1, q = 0, P = 2, D = 1, Q = 3, S = 12)
smod <- sarima(unemp, p = 0, d = 1, q = 2, P = 2, D = 1, Q = 3, S = 12)
smod$ttable
smod <- sarima(unemp, p = 0, d = 1, q = 4, P = 2, D = 1, Q = 3, S = 12)
smod$ttable
smod <- sarima(unemp, p = 0, d = 0, q = 2, P = 2, D = 1, Q = 3, S = 12)
smod <- sarima(unemp, p = 0, d = 1, q = 2, P = 2, D = 1, Q = 3, S = 12)
smod$ttable
smod <- sarima(unemp, p = 0, d = 1, q = 2, P = 2, D = 1, Q = 4, S = 12)
smod$ttable
smod <- sarima(unemp, p = 0, d = 1, q = 2, P = 2, D = 1, Q = 3, S = 12)
smod$ttable
acf2(unemp_df, max.lag = 200)
smod <- sarima(unemp, p = 12, d = 1, q = 2, P = 0, D = 1, Q = 3, S = 12)
smod$ttable
smod <- sarima(unemp, p = 2, d = 1, q = 2, P = 0, D = 1, Q = 3, S = 12)
smod$ttable
smod <- sarima(unemp, p = 0, d = 1, q = 2, P = 0, D = 1, Q = 3, S = 12)
smod$ttable
smod <- sarima(unemp, p = 0, d = 1, q = 2, P = 0, D = 1, Q = 3, S = 12)
smod$ttable
smod <- sarima(unemp, p = 0, d = 1, q = 2, P = 0, D = 1, Q = 1, S = 12)
smod$ttable
smod <- sarima(unemp, p = 0, d = 1, q = 3, P = 0, D = 1, Q = 1, S = 12)
smod$ttable
smod <- sarima(unemp, p = 0, d = 1, q = 2, P = 0, D = 1, Q = 1, S = 12)
smod$ttable
help(sarima.for)
sarima.for(unemp, n.ahead = 12, p = 0, d = 1, q = 2, P = 0, D = 1, Q = 1, S = 12)
sarima.for(unemp, n.ahead = 20, p = 0, d = 1, q = 2, P = 0, D = 1, Q = 1, S = 12)
pred <- unemp - resid(smod$fit)
resid(smod$fit)
pred <- unemp - resid(smod$fit)
par(mfrow = c(1,1))
plot(unemp)
lines(pred, col = "blue", lwd = 2)
modAR1 <- SSModel(unemp ~
SSMtrend(2, Q = c(list(0), list(NA))) +
SSMarima(ar = 0, Q = 0) +
SSMseasonal(12, sea.type = "dummy"), H = NA)
library(KFAS)
# ----------
# AR(1)
modAR1 <- SSModel(unemp ~
SSMtrend(2, Q = c(list(0), list(NA))) +
SSMarima(ar = 0, Q = 0) +
SSMseasonal(12, sea.type = "dummy"), H = NA)
updatefn <- function(pars, model){
model <- SSModel(unemp ~
SSMtrend(2, Q = c(list(0), list(exp(pars[1])))) +
SSMarima(ar = artransform(pars[2]), Q = exp(pars[3])) +
SSMseasonal(12, sea.type = "dummy"), H = exp(pars[4]))
return(model)
}
fitAR1 <- fitSSM(modAR1, c(-1, 0, 6, 3), updatefn, method = "BFGS")
modAR1 <- SSModel(unemp ~
SSMtrend(2, Q = c(list(0), list(NA))) +
SSMarima(ar = 0, Q = 0) +
SSMseasonal(12, sea.type = "dummy"), H = NA)
updatefn <- function(pars, model){
model <- SSModel(unemp ~
SSMtrend(2, Q = c(list(0), list(exp(pars[1])))) +
SSMarima(ar = artransform(pars[2]), Q = exp(pars[3])) +
SSMseasonal(12, sea.type = "dummy"), H = exp(pars[4]))
return(model)
}
fitAR1 <- fitSSM(modAR1, c(0, 0, 0, 0), updatefn, method = "BFGS")
fitAR1 <- fitSSM(modAR1, c(1, 1, 1, 1), updatefn, method = "BFGS")
modAR2 <- SSModel(unemp ~
SSMtrend(2, Q = c(list(0), list(NA))) +
SSMarima(ar = c(0, 0), Q = 0) +
SSMseasonal(12, sea.type = "dummy"), H = NA)
updatefn <- function(pars, model){
model <- SSModel(unemp ~
SSMtrend(2, Q = c(list(0), list(exp(pars[1])))) +
SSMarima(ar = artransform(pars[2:3]), Q = exp(pars[4])) +
SSMseasonal(12, sea.type = "dummy"), H = exp(pars[5]))
return(model)
}
fitAR2 <- fitSSM(modAR2, c(-1, 0.1, 0, 6, 3), updatefn, method = "BFGS")
fitAR2 <- fitSSM(modAR2, c(10, 10, 10 ,10), updatefn, method = "BFGS")
kfsAR2 <- KFS(fitAR2$model)
unemp <- read.table("UnempRate.txt", sep = "\t", header = T, stringsAsFactors = F)
unemp <- as.ts(unemp, start = 1948, end = 1978, frequency = 12)
MTSplot(unemp)
unemp <- read.table("UnempRate.txt", sep = "\t", header = T, stringsAsFactors = F)
data(UnempRate, package = "astsa")
write.table(UnempRate, file = "UnempRate.txt", row.names = F, quote = F, sep = "\t")
unemp <- read.table("UnempRate.txt", sep = "\t", header = T, stringsAsFactors = F)
unemp <- as.ts(unemp, start = 1948, end = 1978, frequency = 12)
MTSplot(unemp)
plot(decompose(unemp, type = "additive"))
unemp <- as.ts(unemp, start = 1948, end = 1978, frequency = 12)
MTSplot(unemp)
unemp
unemp <- as.ts(unemp, start = 1948, end = 1978, frequency = 12)
MTSplot(unemp)
plot(decompose(unemp, type = "additive"))
unemp <- read.table("UnempRate.txt", sep = "\t", header = T, stringsAsFactors = F)
unemp
unemp <- as.ts(unemp, start = 1948, end = 1978, frequency = 12)
unemp
unemp <- as.ts(unemp, start = 1948, end = 1978, frequency = 12)
unemp
UnempRate
unemp <- read.table("UnempRate.txt", sep = "\t", header = T, stringsAsFactors = F)
unemp <- as.ts(unemp, start = 1948, end = 2016, frequency = 12)
# ------------------------------------------------------------------------------
# data exploration:  time series plot
# ------------------------------------------------------------------------------
MTSplot(unemp)
plot(decompose(unemp, type = "additive"))
unemp
UnempRate
write.table(UnempRate, file = "UnempRate.txt", sep = "\t", row.names = F, quote = F)
unemp <- read.table("UnempRate.txt", sep = "\t", header = T, stringsAsFactors = F)
unemp
unemp <- as.ts(unemp, start = 1948, end = 2016, frequency = 12)
unemp
unemp <- ts(unemp, start = 1948, end = 2016, frequency = 12)
unemp
MTSplot(unemp)
# ------------------------------------------------------------------------------
# data exploration:  decompose
# ------------------------------------------------------------------------------
plot(decompose(unemp, type = "additive"))
forecast::ndiffs(unemp)
plot(diff(unemp))
mean(diff(unemp))
graphics.off()
par(mfrow = c(1,1))
plot(unemp)
lines(smooth.spline(unemp, spar = 0.5), col = "red", lwd = 2)
lines(smooth.spline(unemp, spar = 1), col = "blue", lwd = 2)
graphics.off()
par(mfrow = c(1,1))
plot(unemp)
lines(smooth.spline(unemp, spar = 0.5), col = "red", lwd = 2)
lines(smooth.spline(unemp, spar = 0.75), col = "blue", lwd = 2)
lines(smooth.spline(unemp, spar = 1), col = "blue", lwd = 2)
forecast::ndiffs(unemp)
plot(decompose(unemp, type = "additive"))
summary(ur.df(unemp, type = "trend", lags = 14))
library(urca)
# ----------
# random walk + trend
# diff(y(t)) = beta1 + beta2 * t + pi * y(t-1) + sum{ rho(j) * diff(y(t-j)) } + alpha(t),  j = 1,2,3,4,5
summary(ur.df(unemp, type = "trend", lags = 14))
unemp_df <- diff(unemp)
unemp_dt <- resid(lm(unemp ~ time(unemp)))
# ----------
plot(decompose(unemp_df))
acf2(unemp_df, max.lag = 200)
acf2(unemp_dt, max.lag = 200)
acf2(unemp_df, max.lag = 200)
smod <- sarima(unemp, p = 0, d = 1, q = 2, P = 0, D = 1, Q = 1, S = 12)
smod$ttable
acf2(unemp_df, max.lag = 200)
smod <- sarima(unemp, p = 0, d = 1, q = 2, P = 0, D = 1, Q = 1, S = 12)
smod$ttable
smod <- sarima(unemp, p = 0, d = 1, q = 4, P = 0, D = 1, Q = 1, S = 12)
acf2(unemp_df, max.lag = 200)
smod <- sarima(unemp, p = 0, d = 1, q = 4, P = 0, D = 1, Q = 1, S = 12)
smod$ttable
smod <- sarima(unemp, p = 0, d = 1, q = 6, P = 0, D = 1, Q = 1, S = 12)
smod$ttable
smod <- sarima(unemp, p = 0, d = 1, q = 5, P = 0, D = 1, Q = 1, S = 12)
smod$ttable
pred <- unemp - resid(smod$fit)
par(mfrow = c(1,1))
plot(unemp)
lines(pred, col = "blue", lwd = 2)
sarima.for(unemp, n.ahead = 20, p = 0, d = 1, q = 5, P = 0, D = 1, Q = 1, S = 12)
plot(unemp)
sarima.for(unemp, n.ahead = 20, p = 0, d = 1, q = 5, P = 0, D = 1, Q = 1, S = 12)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\00_basics\\10_time_series_basics\\weight")
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  weight
# ------------------------------------------------------------------------------
dat <- read.table("Weight.dat", header = FALSE)
str(dat)
car::some(dat)
# ----------
colnames(dat) <- c("weight")
( strllm <- StructTS(dat$weight, type = "level") )
# Kalman Filter used in fittting
strllm$model
# ----------
# S/N ratio = 0.475
strllm$model$V
strllm$model$h
strllm$model$V / strllm$model$h
head(strllm$fitted)
# fitted values
head(fitted(strllm))
head(strllm$fitted[,"level"])
# ----------
graphics.off()
par(mfrow = c(1,1))
ts.plot(dat$weight, type = "b", ylim = c(82, 88))
lines(dat$weight - resid(arima111$fit), lwd = 1, col = "orange")
lines(dat$weight - resid(arima011$fit), lwd = 1, col = "blue")
lines(fitted(strllm), lwd = 2, col = "blue")
# filtered value
lines(strllm$fitted[,"level"], lwd = 2, col = "darkgreen")
library(KFAS)
# local level model:  estimate Q and H (by maximum likelihood)
# Q:  variance for system equation
# H:  variance for observation equation
modLocallevel <- SSModel(dat$weight ~ SSMtrend(1, Q = NA), H = NA)
fit <- fitSSM(modLocallevel, numeric(2))
fit$model$Q
fit$model$H
fit$model$Q / fit$model$H
kfs <- KFS(fit$model)
names(kfs)
# filtered estimates of state
kfs$att
# Non-diffuse parts of the error covariance matrix of predicted states
kfs$P
# error variance at time point
( Pfilt <- kfs$P[,,-1] - fit$model$Q )
# smoothed estimate of state
kfs$alphahat
# error covariance matrices of smoothed states
kfs$V[,,1]
# One-step-ahead predictions of states
kfs$a
head(kfs$a[-1])
head(c(kfs$att))
# ----------
# confidence interval (95%) of filtered value
( afiltconf <- cbind(kfs$att + sqrt(Pfilt) * qnorm(0.025), kfs$att + sqrt(Pfilt) * qnorm(0.975)) )
# confidence interval (95%) of smoothed value
( aamconf <- cbind(kfs$alphahat + sqrt(c(kfs$V)) * qnorm(0.475), kfs$alphahat + sqrt(c(kfs$V)) * qnorm(0.975)) )
# plot filtered value:  same with StructTS estimation
graphics.off()
par(mfrow = c(2,1))
ts.plot(dat$weight, type = "b", ylim = c(82, 88))
lines(strllm$fitted[,"level"], lwd = 2, col = "darkgreen")
ts.plot(dat$weight, type = "b", ylim = c(82, 88))
lines(kfs$att, lwd = 2, col = "blue")
# plot filtered value and its confidence interval
graphics.off()
par(mfrow = c(1,1))
ts.plot(dat$weight, type = "b", ylim = c(82, 88))
lines(kfs$att, lwd = 2, col = "blue")
lines(afiltconf[,1], lwd = 1, lty = 2, col = "blue")
lines(afiltconf[,2], lwd = 1, lty = 2, col = "blue")
# local level model:  r = 1,  q = 2
modLocallevel <- SSModel(dat$weight ~ SSMtrend(1, Q = NA), H = NA)
fitLocallevel <- fitSSM(modLocallevel, numeric(2))
kfsLocallevel <- KFS(fitLocallevel$model)
fitLocallevel$model$Q
fitLocallevel$model$H
modTrend <- SSModel(dat$weight ~ SSMtrend(2, Q = c(list(0), list(NA))), H = NA)
fitTrend <- fitSSM(modTrend, numeric(2))
kfsTrend <- KFS(fitTrend$model)
fitTrend$model$Q
fitTrend$model$H
head(kfsTrend$alphahat)
modLocaltrend <- SSModel(dat$weight ~ SSMtrend(2, Q = c(list(NA), list(NA))), H = NA)
# local linear trend model but with H = 0.14, Q = 0.076
# modLocaltrend <- SSModel(dat$weight ~ SSMtrend(2, Q = c(list(0.076), list(NA))), H = 0.14)
fitLocaltrend <- fitSSM(modLocaltrend, numeric(3))
kfsLocaltrend <- KFS(fitLocaltrend$model)
fitLocaltrend$model$Q
# estimated as almost zero --> almost local level model
fitLocaltrend$model$H
# ----------
# orange:  Local Level Model
# blue:  2nd order Trend model
# black:  Local Linear Trend model
graphics.off()
par(mfrow = c(2,1))
ts.plot(dat$weight, lty = 3, type = "o", ylab = "level")
lines(kfsLocallevel$alphahat[,"level"], lwd = 2, lty = 2, col = "orange")
lines(kfsTrend$alphahat[,"level"], lwd = 2, col = "blue")
# almost overlapped with original time series
lines(kfsLocaltrend$alphahat[,"level"], lwd = 2)
ts.plot(kfsTrend$alphahat[,"slope"], lwd = 2, col = "blue", ylab = "slope")
lines(kfsLocaltrend$alphahat[,"slope"], lwd = 2)
# compare 2nd order Trend model vs. smooth.spline spar = 0.75
graphics.off()
par(mfrow = c(1,1))
ts.plot(dat$weight, type = "b")
lines(kfsTrend$alphahat[,"level"], lwd = 2, col = "blue")
lines(smooth.spline(dat$weight, spar = 0.75), lwd = 2, col = "blue", lty = 2)
likLocallevel <- kfsLocallevel$logLik - sum(kfsLocallevel$Finf > 0) * log(2 * pi) / 2
likTrend <- kfsTrend$logLik - sum(kfsTrend$Finf > 0) * log(2 * pi) / 2
likLocaltrend <- kfsLocaltrend$logLik - sum(kfsLocaltrend$Finf > 0) * log(2 * pi) / 2
# number of estimated parameters are r + q
-2 * likLocallevel + 2 * (2 + 1)
-2 * likTrend + 2 * (2 + 2)
-2 * likLocaltrend + 2 * (3 + 2)
# -->
# local level model is best
( strtrend <- StructTS(dat$weight, type = "trend") )
# ----------
strtrend$model$V
# estimate is 0.14  (not zero)
strtrend$model$h
# S/N ratio = 0.5088
strtrend$model$V / strllm$model$h
# ----------
head(strtrend$fitted)
# fitted values
head(fitted(strtrend))
# ----------
# orange:  Local Level Model
# blue:  2nd order Trend model
# black:  Local Linear Trend model
# darkgreen:  Local Linear Trend model by StrucTS
graphics.off()
par(mfrow = c(1,1))
ts.plot(kfsTrend$alphahat[,"slope"], lwd = 2, col = "blue", ylab = "slope")
lines(strtrend$fitted[,"slope"], lwd = 2, col = "darkgreen")
# not smoothed slope
lines(kfsLocaltrend$alphahat[,"slope"], lwd = 2)
# ----------
graphics.off()
par(mfrow = c(1,1))
ts.plot(dat$weight, type = "b", ylim = c(83, 87))
lines(kfsLocallevel$alphahat[,"level"], lwd = 2, lty = 2, col = "orange")
lines(kfsTrend$alphahat[,"level"], lwd = 2, col = "blue")
# almost overlapped with original time series
lines(kfsLocaltrend$alphahat[,"level"], lwd = 2)
lines(strtrend$fitted[,"level"], lwd = 2, col = "darkgreen")
