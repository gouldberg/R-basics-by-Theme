fitTrend$model$H
head(kfsTrend$alphahat)
# ----------
# local linear trend model:  r = 2,  q = 3
modLocaltrend <- SSModel(dat$weight ~ SSMtrend(2, Q = c(list(NA), list(NA))), H = NA)
# local linear trend model but with H = 0.14, Q = 0.076
# modLocaltrend <- SSModel(dat$weight ~ SSMtrend(2, Q = c(list(0.076), list(NA))), H = 0.14)
fitLocaltrend <- fitSSM(modLocaltrend, numeric(3))
kfsLocaltrend <- KFS(fitLocaltrend$model)
fitLocaltrend$model$Q
# estimated as almost zero --> almost local level model
fitLocaltrend$model$H
# ----------
# orange:  Local Level Model
# blue:  2nd order Trend model
# black:  Local Linear Trend model
graphics.off()
par(mfrow = c(2,1))
ts.plot(dat$weight, lty = 3, type = "o", ylab = "level")
lines(kfsLocallevel$alphahat[,"level"], lwd = 2, lty = 2, col = "orange")
lines(kfsTrend$alphahat[,"level"], lwd = 2, col = "blue")
# almost overlapped with original time series
lines(kfsLocaltrend$alphahat[,"level"], lwd = 2)
ts.plot(kfsTrend$alphahat[,"slope"], lwd = 2, col = "blue", ylab = "slope")
lines(kfsLocaltrend$alphahat[,"slope"], lwd = 2)
( strtrend <- StructTS(dat$weight, type = "trend") )
# ----------
strtrend$model$V
# estimate is 0.14  (not zero)
strtrend$model$h
# S/N ratio = 0.5088
strtrend$model$V / strllm$model$h
# ----------
head(strtrend$fitted)
# fitted values
head(fitted(strtrend))
# ----------
# orange:  Local Level Model
# blue:  2nd order Trend model
# black:  Local Linear Trend model
# darkgreen:  Local Linear Trend model by StrucTS
graphics.off()
par(mfrow = c(1,1))
ts.plot(kfsTrend$alphahat[,"slope"], lwd = 2, col = "blue", ylab = "slope")
lines(strtrend$fitted[,"slope"], lwd = 2, col = "darkgreen")
# not smoothed slope
lines(kfsLocaltrend$alphahat[,"slope"], lwd = 2)
graphics.off()
par(mfrow = c(1,1))
ts.plot(dat$weight, type = "b", ylim = c(83, 87))
lines(kfsLocallevel$alphahat[,"level"], lwd = 2, lty = 2, col = "orange")
lines(kfsTrend$alphahat[,"level"], lwd = 2, col = "blue")
# almost overlapped with original time series
lines(kfsLocaltrend$alphahat[,"level"], lwd = 2)
lines(strtrend$fitted[,"level"], lwd = 2, col = "darkgreen")
dat <- read.csv("sales.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
str(dat)
car::some(dat)
# ----------
colnames(dat) <- c("month", "fabrics", "machinery", "fuel")
# ------------------------------------------------------------------------------
# Fit Structural Time Series (by maximum likelihood)
# Seasonality and AR by KFAS
# ------------------------------------------------------------------------------
library(KFAS)
# ----------
# AR(1)
modAR1 <- SSModel(data$fabrics ~
SSMtrend(2, Q = c(list(0), list(NA))) +
SSMarima(ar = 0, Q = 0) +
SSMseasonal(12, sea.type = "dummy"), H = NA)
updatefn <- function(pars, model){
model <- SSModel(dat$fabrics ~
SSMtrend(2, Q = c(list(0), list(exp(pars[1])))) +
SSMarima(ar = artransform(pars[2]), Q = exp(pars[3])) +
SSMseasonal(12, sea.type = "dummy"), H = exp(pars[4]))
return(model)
}
fitAR1 <- fitSSM(modAR1, c(-1, 0, 6, 3), updatefn, method = "BFGS")
kfsAR1 <- KFS(fitAR1$model)
# ----------
# AR(2)
modAR2 <- SSModel(data$fabrics ~
SSMtrend(2, Q = c(list(0), list(NA))) +
SSMarima(ar = c(0, 0), Q = 0) +
SSMseasonal(12, sea.type = "dummy"), H = NA)
updatefn <- function(pars, model){
model <- SSModel(dat$fabrics ~
SSMtrend(2, Q = c(list(0), list(exp(pars[1])))) +
SSMarima(ar = artransform(pars[2:3]), Q = exp(pars[4])) +
SSMseasonal(12, sea.type = "dummy"), H = exp(pars[5]))
return(model)
}
fitAR2 <- fitSSM(modAR2, c(-1, 0.1, 0, 6, 3), updatefn, method = "BFGS")
kfsAR2 <- KFS(fitAR2$model)
# ----------
# AR(12)  but other coefficient is zero other than lag12
modAR12 <- SSModel(data$fabrics ~
SSMtrend(2, Q = c(list(0), list(NA))) +
SSMarima(ar = rep(0, 12), Q = 0) +
SSMseasonal(12, sea.type = "dummy"), H = NA)
updatefn <- function(pars, model){
model <- SSModel(dat$fabrics ~
SSMtrend(2, Q = c(list(0), list(exp(pars[1])))) +
SSMarima(ar = v(rep(0, 11), artransform(pars[2])), Q = exp(pars[3])) +
SSMseasonal(12, sea.type = "dummy"), H = exp(pars[4]))
return(model)
}
fitAR12 <- fitSSM(modAR12, c(-1, 0.4, 6, 0), updatefn, method = "BFGS")
kfsAR12 <- KFS(fitAR12$model)
modAR1 <- SSModel(data$fabrics ~
SSMtrend(2, Q = c(list(0), list(NA))) +
SSMarima(ar = 0, Q = 0) +
SSMseasonal(12, sea.type = "dummy"), H = NA)
updatefn <- function(pars, model){
model <- SSModel(dat$fabrics ~
SSMtrend(2, Q = c(list(0), list(exp(pars[1])))) +
SSMarima(ar = artransform(pars[2]), Q = exp(pars[3])) +
SSMseasonal(12, sea.type = "dummy"), H = exp(pars[4]))
return(model)
}
fitAR1 <- fitSSM(modAR1, c(-1, 0, 6, 3), updatefn, method = "BFGS")
modAR1 <- SSModel(data$fabrics ~
SSMtrend(2, Q = c(list(0), list(NA))) +
SSMarima(ar = 0, Q = 0) +
SSMseasonal(12, sea.type = "dummy"), H = NA)
modAR1 <- SSModel(dat$fabrics ~
SSMtrend(2, Q = c(list(0), list(NA))) +
SSMarima(ar = 0, Q = 0) +
SSMseasonal(12, sea.type = "dummy"), H = NA)
dat$fabrics
dat <- read.csv("sales.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
str(dat)
car::some(dat)
# ----------
colnames(dat) <- c("month", "fabrics", "machinery", "fuel")
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\00_basics\\10_time_series_basics\\sales")
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  sales
# ------------------------------------------------------------------------------
dat <- read.csv("sales.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
str(dat)
car::some(dat)
# ----------
colnames(dat) <- c("month", "fabrics", "machinery", "fuel")
library(KFAS)
# ----------
# AR(1)
modAR1 <- SSModel(dat$fabrics ~
SSMtrend(2, Q = c(list(0), list(NA))) +
SSMarima(ar = 0, Q = 0) +
SSMseasonal(12, sea.type = "dummy"), H = NA)
updatefn <- function(pars, model){
model <- SSModel(dat$fabrics ~
SSMtrend(2, Q = c(list(0), list(exp(pars[1])))) +
SSMarima(ar = artransform(pars[2]), Q = exp(pars[3])) +
SSMseasonal(12, sea.type = "dummy"), H = exp(pars[4]))
return(model)
}
fitAR1 <- fitSSM(modAR1, c(-1, 0, 6, 3), updatefn, method = "BFGS")
kfsAR1 <- KFS(fitAR1$model)
modAR2 <- SSModel(dat$fabrics ~
SSMtrend(2, Q = c(list(0), list(NA))) +
SSMarima(ar = c(0, 0), Q = 0) +
SSMseasonal(12, sea.type = "dummy"), H = NA)
updatefn <- function(pars, model){
model <- SSModel(dat$fabrics ~
SSMtrend(2, Q = c(list(0), list(exp(pars[1])))) +
SSMarima(ar = artransform(pars[2:3]), Q = exp(pars[4])) +
SSMseasonal(12, sea.type = "dummy"), H = exp(pars[5]))
return(model)
}
fitAR2 <- fitSSM(modAR2, c(-1, 0.1, 0, 6, 3), updatefn, method = "BFGS")
kfsAR2 <- KFS(fitAR2$model)
modAR12 <- SSModel(dat$fabrics ~
SSMtrend(2, Q = c(list(0), list(NA))) +
SSMarima(ar = rep(0, 12), Q = 0) +
SSMseasonal(12, sea.type = "dummy"), H = NA)
updatefn <- function(pars, model){
model <- SSModel(dat$fabrics ~
SSMtrend(2, Q = c(list(0), list(exp(pars[1])))) +
SSMarima(ar = v(rep(0, 11), artransform(pars[2])), Q = exp(pars[3])) +
SSMseasonal(12, sea.type = "dummy"), H = exp(pars[4]))
return(model)
}
fitAR12 <- fitSSM(modAR12, c(-1, 0.4, 6, 0), updatefn, method = "BFGS")
kfsAR12 <- KFS(fitAR12$model)
modAR12 <- SSModel(dat$fabrics ~
SSMtrend(2, Q = c(list(0), list(NA))) +
SSMarima(ar = rep(0, 12), Q = 0) +
SSMseasonal(12, sea.type = "dummy"), H = NA)
updatefn <- function(pars, model){
model <- SSModel(dat$fabrics ~
SSMtrend(2, Q = c(list(0), list(exp(pars[1])))) +
SSMarima(ar = v(rep(0, 11), artransform(pars[2])), Q = exp(pars[3])) +
SSMseasonal(12, sea.type = "dummy"), H = exp(pars[4]))
return(model)
}
fitAR12 <- fitSSM(modAR12, c(-1, 0.4, 6, 0), updatefn, method = "BFGS")
fitAR12 <- fitSSM(modAR12, c(-1, 0.4, 6, 0), updatefn, method = "BFGS")
updatefn <- function(pars, model){
model <- SSModel(dat$fabrics ~
SSMtrend(2, Q = c(list(0), list(exp(pars[1])))) +
SSMarima(ar = c(rep(0, 11), artransform(pars[2])), Q = exp(pars[3])) +
SSMseasonal(12, sea.type = "dummy"), H = exp(pars[4]))
return(model)
}
fitAR12 <- fitSSM(modAR12, c(-1, 0.4, 6, 0), updatefn, method = "BFGS")
kfsAR12 <- KFS(fitAR12$model)
graphics.off()
par(mfrow = c(1,1))
plot(dat$fabrics, type = "l", lty = 1, ylab = "sales", xaxt = "n", xaxs = "i", col = 1, main = "level", lwd = 3)
axis(side = 1, at = 1+0:11*12,
labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
lines(kfsAR10$alphahat[,"level"], col = "gray")
lines(kfsAR2$alphahat[,"level"], col = "darkgreen")
lines(kfsAR12$alphahat[,"level"], col = "red")
graphics.off()
par(mfrow = c(1,1))
plot(dat$fabrics, type = "l", lty = 1, ylab = "sales", xaxt = "n", xaxs = "i", col = 1, main = "level", lwd = 3)
axis(side = 1, at = 1+0:11*12,
labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
lines(kfsAR10$alphahat[,"level"], col = "gray")
lines(kfsAR1$alphahat[,"level"], col = "gray")
kfsAR1$alphahat[,"level"]
lines(kfsAR2$alphahat[,"level"], col = "darkgreen")
lines(kfsAR12$alphahat[,"level"], col = "red")
plot(dat$fabrics, type = "l", lty = 1, ylab = "sales", xaxt = "n", xaxs = "i", col = 1, lwd = 3, main = "filtered")
axis(side = 1, at = 1+0:11*12,
labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
plot(dat$fabrics, type = "l", lty = 1, ylab = "sales", xaxt = "n", xaxs = "i", col = 1, lwd = 3, main = "filtered")
axis(side = 1, at = 1+0:11*12,
labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
lines(dat$fabrics + resid(kfsAR1), col = "gray")
lines(dat$fabrics + resid(kfsAR2), col = "darkgreen")
lines(dat$fabrics + resid(kfsAR12), col = "red")
lines(dat$fabrics + resid(kfsSeasTri), col = "blue")
plot(dat$fabrics, type = "l", lty = 1, ylab = "sales", xaxt = "n", xaxs = "i", col = 1, lwd = 3, main = "filtered")
axis(side = 1, at = 1+0:11*12,
labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
lines(dat$fabrics + resid(kfsAR1), col = "gray")
lines(dat$fabrics + resid(kfsAR2), col = "darkgreen")
lines(dat$fabrics + resid(kfsAR12), col = "red")
likAR1 <- kfsAR1$logLik - sum(kfsAR1$Finf > 0) * log(2*pi)/2
likAR2 <- kfsAR2$logLik - sum(kfsAR2$Finf > 0) * log(2*pi)/2
likAR12 <- kfsAR12$logLik - sum(kfsAR12$Finf > 0) * log(2*pi)/2
( mseAR1 <- sum(kfsAR1$v[14:144]^2) / 131 )
( mseAR2 <- sum(kfsAR2$v[14:144]^2) / 131 )
( mseAR12 <- sum(kfsAR12$v[14:144]^2) / 131 )
-2 * likAR1 + 2 * (4 + 13)
-2 * likAR2 + 2 * (5 + 13)
-2 * likAR12 + 2 * (4 + 13)
# ------------------------------------------------------------------------------
# Fit Structural Time Series (by maximum likelihood)
# seasonality model by StructTS
# ------------------------------------------------------------------------------
# need to define frequency
( fab2 <- ts(dat$fabrics, start = 1, frequency = 12) )
# ----------
( strsea <- StructTS(fab2, type = "BSM") )
# Kalman Filter used in fittting
strsea$model
# ----------
strsea$model$V
strsea$model$h
# ----------
head(strsea$fitted)
# fitted values
head(fitted(strllm))
head(strllm$fitted[,"level"])
# ----------
graphics.off()
par(mfrow = c(1,1))
ts.plot(fab2, type = "b", ylim = c(650, 1150))
lines(fitted(strsea)[,"level"] + fitted(strsea)[,"sea"], lwd = 2, col = "blue")
# residuals are very small ...
resid(strsea)
tsdiag(strsea)
# ------------------------------------------------------------------------------
# Fit Structural Time Series (by maximum likelihood)
# Seasonality by KFAS
# ------------------------------------------------------------------------------
library(KFAS)
# ----------
# Dummy type (fixed) Seasonality
modSeasDummy0 <- SSModel(dat$fabrics ~ SSMtrend(2, Q = c(list(0), list(NA))) + SSMseasonal(12, sea.type = "dummy"), H = NA)
# initial value = numeric(2) = c(0, 0)
fitSeasDummy0 <- fitSSM(modSeasDummy0, numeric(2))
kfsSeasDummy0 <- KFS(fitSeasDummy0$model)
# ----------
# Dummy type, seasonality change
modSeasDummy <- SSModel(dat$fabrics ~ SSMtrend(2, Q = c(list(0), list(NA))) + SSMseasonal(12, sea.type = "dummy", Q = NA), H = NA)
fitSeasDummy <- fitSSM(modSeasDummy, numeric(3))
kfsSeasDummy <- KFS(fitSeasDummy$model)
# ----------
# trigonometric type (fixed)
modSeasTri0 <- SSModel(dat$fabrics ~ SSMtrend(2, Q = c(list(0), list(NA))) + SSMseasonal(12, sea.type = "trigonometric"), H = NA)
fitSeasTri0 <- fitSSM(modSeasTri0, numeric(2))
kfsSeasTri0 <- KFS(fitSeasTri0$model)
# ----------
# trigonometric type, seasonality change
modSeasTri <- SSModel(dat$fabrics ~ SSMtrend(2, Q = c(list(0), list(NA))) + SSMseasonal(12, sea.type = "trigonometric", Q = NA), H = NA)
updatefn <- function(pars, model){
model$H[] <- exp(pars[1])
diag(model$Q[,,1]) <- c(0, exp(pars[2]), rep(exp(pars[3:8]), c(rep(2,5),1)))
return(model)
}
fitSeasTri <- fitSSM(modSeasTri, c(6,0,1,2,0,0,0,0), updatefn, method="BFGS")
kfsSeasTri <- KFS(fitSeasTri$model)
# ----------
graphics.off()
par(mfrow = c(1,1))
plot(dat$fabrics, type = "l", lty = 1, ylab = "sales", xaxt = "n", xaxs = "i", col = 1, main = "level", lwd = 3)
axis(side = 1, at = 1+0:11*12,
labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
lines(kfsSeasDummy0$alphahat[,"level"], col = "gray")
lines(kfsSeasDummy$alphahat[,"level"], col = "darkgreen")
lines(kfsSeasTri0$alphahat[,"level"], col = "red")
lines(kfsSeasTri$alphahat[,"level"], col = "blue")
plot(dat$fabrics, type = "l", lty = 1, ylab = "sales", xaxt = "n", xaxs = "i", col = 1, lwd = 3, main = "filtered")
axis(side = 1, at = 1+0:11*12,
labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
lines(dat$fabrics + resid(kfsSeasDummy0), col = "gray")
lines(dat$fabrics + resid(kfsSeasDummy), col = "darkgreen")
lines(dat$fabrics + resid(kfsSeasTri0), col = "red")
lines(dat$fabrics + resid(kfsSeasTri), col = "blue")
# ----------
# maximum likelihood
likSeasDummy0 <- kfsSeasDummy0$logLik - sum(kfsSeasDummy0$Finf>0) * log(2*pi)/2
likSeasDummy <- kfsSeasDummy$logLik - sum(kfsSeasDummy$Finf>0) * log(2*pi)/2
likSeasTri0 <- kfsSeasTri0$logLik - sum(kfsSeasTri0$Finf>0) * log(2*pi)/2
likSeasTri <- kfsSeasTri$logLik - sum(kfsSeasTri$Finf>0) * log(2*pi)/2
# ----------
# mean square error of one-step-ahead prediction
( mseSeasDummy0 <- sum(kfsSeasDummy0$v[14:144]^2) / 131 )
( mseSeasDummy <- sum(kfsSeasDummy$v[14:144]^2) / 131 )
( mseSeasTri0 <- sum(kfsSeasTri0$v[14:144]^2) / 131 )
( mseSeasTri <- sum(kfsSeasTri$v[14:144]^2) / 131 )
# -->
# trigonometric type, seasonality change  is best
# ----------
# modify log likelihood to be compared to fixed seasonality
likSeasTri <- likSeasTri - (likSeasTri0 - likSeasDummy0)
likSeasTri0 <- likSeasDummy0
# ----------
# AIC
-2 * likSeasDummy0 + 2 * (2 + 13)
-2 * likSeasDummy + 2 * (3 + 13)
-2 * likSeasTri0 + 2 * (2 + 13)
-2 * likSeasTri + 2 * (8 + 13)
# -->
# trigonometric type, seasonality change  is best
# ------------------------------------------------------------------------------
# Fit Structural Time Series (by maximum likelihood)
# compare 1st order and 2nd order trend model
# ------------------------------------------------------------------------------
mod1 <- SSModel(c(dat$fabrics[1:120], rep(NA, 24)) ~ SSMtrend(1, Q = NA) + SSMseasonal(12, Q = 0 ), H = NA)
mod2 <- SSModel(c(dat$fabrics[1:120], rep(NA, 24)) ~ SSMtrend(1, Q = NA) + SSMseasonal(12, Q = NA), H = NA)
mod3 <- SSModel(c(dat$fabrics[1:120], rep(NA, 24)) ~ SSMtrend(2, Q = list(0, NA)) + SSMseasonal(12, Q = 0 ), H = NA)
mod4 <- SSModel(c(dat$fabrics[1:120], rep(NA, 24)) ~ SSMtrend(2, Q = list(0, NA)) + SSMseasonal(12, Q = NA), H = NA)
fit1 <- fitSSM(mod1, numeric(2), method = "BFGS")
fit2 <- fitSSM(mod2, numeric(3), method = "BFGS")
fit3 <- fitSSM(mod3, numeric(2), method = "BFGS")
fit4 <- fitSSM(mod4, numeric(3), method = "BFGS")
kfs1 <- KFS(fit1$model)
kfs2 <- KFS(fit2$model)
kfs3 <- KFS(fit3$model)
kfs4 <- KFS(fit4$model)
logLik1 <- kfs1$logLik - sum(kfs1$Finf>0) * log(2*pi)/2
logLik2 <- kfs2$logLik - sum(kfs2$Finf>0) * log(2*pi)/2
logLik3 <- kfs3$logLik - sum(kfs3$Finf>0) * log(2*pi)/2
logLik4 <- kfs4$logLik - sum(kfs4$Finf>0) * log(2*pi)/2
-2 * logLik1 + 2 * ( 2 + 12 )
-2 * logLik2 + 2 * ( 3 + 12 )
-2 * logLik3 + 2 * ( 2 + 13 )
-2 * logLik4 + 2 * ( 8 + 13 )
# -->
# 2nd order trend model is not better than 1st order trend model
# ----------
graphics.off()
par(mfrow = c(3,1), ps = 16, mar = c(3.5, 3.5, 1, 1), mgp = c(2, 0.5, 0))
plot(dat$fabrics, type = "l", lty = 1, ylab = "販売額（10億円）", xaxt = "n",xaxs = "i",col = 1,xlab = "(a) 水準成分")
axis(side = 1,at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
lines(kfs2$alphahat[,"level"], col = 3)
lines(kfs4$alphahat[,"level"], col = 4)
abline(v = 120.5, lty = 3)
plot(kfs2$alphahat[,"sea_dummy1"],type = "l", ylab = "販売額（10億円）",xaxt = "n", xaxs = "i", yaxs = "i", col = 3,xlab = "(b) 季節成分")
lines(kfs4$alphahat[,"sea_dummy1"],col = 4)
axis(side = 1,at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
abline(v = 120.5, lty = 3)
plot(dat$fabrics-kfs2$muhat,type = "l", ylab = "販売額（10億円）",　xaxt = "n", xaxs = "i", yaxs = "i", col = 3, ylim = c(-150,150), xlab = "(c) 平滑化観測値撹乱項と長期予測誤差")
lines(dat$fabrics-kfs4$muhat,col = 4)
axis(side = 1,at = 1+0:11*12, labels = c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
abline(v = 120.5, lty = 3)
abline(h = 0, col = 8)
# -->
# but for long-term prediction, 2nd order trend model is better.
tsdiag(kfsSeaTri)
tsdiag(kfsSeasTri)
tsdiag(resid(kfsSeasTri))
resid(kfsSeasTri)
tsdiag(fitSeasTri)
astsa::acf2(resid(kfsSeasTri))
# week
dates <- seq(as.Date("2002-01-01"), as.Date("2013-12-31"), by = 1)
weeks <- table(substr(dates,1,7), weekdays(dates, T))
sun <- weeks[,"日"]
mon <- weeks[,"月"]-sun; tue <- weeks[,"火"]-sun; wed <- weeks[,"水"]-sun
thu <- weeks[,"木"]-sun; fry <- weeks[,"金"]-sun; sat <- weeks[,"土"]-sun
calendar <- cbind(mon, tue, wed, thu, fry, sat)
( calendar <- cbind(mon, tue, wed, thu, fry, sat) )
modCalender <- SSModel(sales$Fabric ~ SSMtrend(2, Q = c(list(0), list(NA)))
+ SSMseasonal(12, sea.type="dummy")
+ leapyear + calendar, H = NA)
fitCalender <- fitSSM(modCalender, numeric(2), method = "BFGS")
kfsCalender <- KFS(fitCalender$model)
modCalender <- SSModel(sales$Fabric ~ SSMtrend(2, Q = c(list(0), list(NA)))
+ SSMseasonal(12, sea.type="dummy")
+ leapyear + calendar, H = NA)
modCalender <- SSModel(dat$fabrics ~ SSMtrend(2, Q = c(list(0), list(NA)))
+ SSMseasonal(12, sea.type="dummy")
+ leapyear + calendar, H = NA)
fitCalender <- fitSSM(modCalender, numeric(2), method = "BFGS")
kfsCalender <- KFS(fitCalender$model)
modCalender <- SSModel(dat$fabrics ~ SSMtrend(2, Q = c(list(0), list(NA)))
+ SSMseasonal(12, sea.type="dummy")
+ leapyear + calendar, H = NA)
leapyear <- rownames(weeks) %in% c("2004-02","2008-02","2012-02")
modCalender <- SSModel(dat$fabrics ~ SSMtrend(2, Q = c(list(0), list(NA)))
+ SSMseasonal(12, sea.type="dummy")
+ leapyear + calendar, H = NA)
fitCalender <- fitSSM(modCalender, numeric(2), method = "BFGS")
kfsCalender <- KFS(fitCalender$model)
plot(kfsCalender$muhat - kfsCalender$alphahat[,"level"], type = "l", xaxs = "i", xaxt = "n", xlab = "", ylab = "販売額（10億円）")
axis(side = 1, at = 1+0:11*12,
labels=c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
graphics.off()
par(mfrow = c(1,1))
plot(kfsCalender$muhat - kfsCalender$alphahat[,"level"], type = "l", xaxs = "i", xaxt = "n", xlab = "", ylab = "販売額（10億円）")
axis(side = 1, at = 1+0:11*12,
labels=c("02/1","03/1","04/1","05/1","06/1","07/1","08/1","09/1","10/1","11/1","12/1","13/1"))
dat$fabrics + resid(kfsAR1)
kfsAR1$muhat
c(dat$fabrics + resid(kfsAR1))
c(kfsAR1$muhat)
help(KFS)
c(dat$fabrics + resid(kfsAR1))
c(kfsAR1$a)
c(kfsAR1$att)
c(dat$fabrics + resid(kfsAR1))
head(c(dat$fabrics + resid(kfsAR1)))
head(c(kfsAR1$att))
head(c(dat$fabrics - resid(kfsAR1)))
head(c(kfsAR1$att))
head(c(dat$fabrics - resid(kfsAR1)))
head(c(kfsAR1$att))
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\00_basics\\10_time_series_basics\\sales")
packages <- c("dplyr", "astsa", "tseries", "forecast", "MTS")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  sales
# ------------------------------------------------------------------------------
dat <- read.csv("sales.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
str(dat)
car::some(dat)
# ----------
colnames(dat) <- c("month", "fabrics", "machinery", "fuel")
# ------------------------------------------------------------------------------
# Fit SARIMA model
# ------------------------------------------------------------------------------
astsa::acf2(dat$fabrics, max.lag = 40)
astsa::acf2(diff(dat$fabrics), max.lag = 40)
# try random walk + noize:  ARIMA(0,1,1)
sarima011 <- astsa::sarima(dat$fabrics, p = 0, d = 1, q = 1, no.constant = TRUE)
# add AR(1):  ARIMA(1,1,1)
sarima111 <- astsa::sarima(dat$fabrics, p = 1, d = 1, q = 1, no.constant = TRUE)
# ARIMA(0,1,1) * (0,1,1)(6)
sarima0110116 <- astsa::sarima(dat$fabrics, p = 0, d = 1, q = 1, P = 0, D = 1, Q = 1, S = 6)
# add MA term: ARIMA(0,1,1) * (0,1,6)(6)
sarima0110166 <- astsa::sarima(dat$fabrics, p = 0, d = 1, q = 1, P = 0, D = 1, Q = 6, S = 6)
# add MA term: ARIMA(0,1,2) * (0,1,6)(6)
sarima0120166 <- astsa::sarima(dat$fabrics, p = 0, d = 1, q = 2, P = 0, D = 1, Q = 6, S = 6)
# -->
# MA(2) is not significant ...
lines(dat$fabrics - resid(sarima0110166$fit), lwd = 1, col = "blue")
par(mfrow = c(1,1))
ts.plot(dat$fabrics, ylim = c(650, 1150))
lines(dat$fabrics - resid(sarima0110166$fit), lwd = 1, col = "blue")
# local level model
( strllm <- StructTS(dat$fabrics, type = "level") )
# Kalman Filter used in fittting
strllm$model
# ----------
# S/N ratio = 0.00228 --> too small
strllm$model$V
strllm$model$h
strllm$model$V / strllm$model$h
# ----------
head(strllm$fitted)
# fitted values
head(fitted(strllm))
head(strllm$fitted[,"level"])
# ----------
graphics.off()
par(mfrow = c(1,1))
ts.plot(dat$fabrics, type = "b", ylim = c(650, 1150))
lines(dat$fabrics - resid(sarima0110166$fit), lwd = 1, col = "orange")
lines(fitted(strllm), lwd = 2, col = "blue")
# filtered value
# lines(strllm$fitted[,"level"], lwd = 2, col = "darkgreen")
