data = res,
type = "l", lty = 1)
update(xy1, xlab = "Time (in weeks)", ylab = "Visual acuity", grid = "h", ylim = c(0, 80))
res_o
( dat <- list(visual0, visual4, visual12, visual24, visual52) )
( flst <- list(miss.pat, treat.f) )
tmp <- lapply(1:length(dat), function(x) tapply(dat[[x]], flst, FUN = mean))
names(tmp) <- c("0wks", "4wks", "12wks", "24wks", "52wks")
res <- bind_rows(tmp)
# ----------
nms1 <- c(rep("Active", 5), rep("Placebo", 5))
nms2 <- rep(c("----", "---X", "--XX", "-XXX", "XXXX"), 2)
res$treat.f <- nms1
res$miss.pat <- nms2
res_o <- res
# ----------
res <- reshape::melt(data.frame(res), id.vars = c("treat.f", "miss.pat"))
from <- c("X0wks", "X4wks", "X12wks", "X24wks", "X52wks")
to <- c(0, 4, 12, 24, 52)
res$time <- to[match(res$variable, from)]
# ----------
xy1 <- xyplot(value ~ time | treat.f,
groups = miss.pat,
data = res,
type = "l", lty = 1)
update(xy1, xlab = "Time (in weeks)", ylab = "Visual acuity", grid = "h", ylim = c(0, 80))
res_o
detach(armd.wide.mnt)
# monotone patterns
mnt.pat <- c("----", "---X", "--XX", "-XXX", "XXXX")
armd.wide.mnt <- subset(armd.wide, miss.pat %in% mnt.pat)
# ----------
armd.wide.mnt1 <- within(armd.wide.mnt, {
miss.pat <- factor(miss.pat, levels = mnt.pat)
})
levels(armd.wide.mnt1$miss.pat)
# ----------
with(armd.wide.mnt1, {
fl  <- list(treat.f, miss.pat)
tapply(subject, fl, FUN = function(x) length(x[!is.na(x)]))
})
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\z_for_demo_uncompleted\\armd")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  ARMD (Age-Related Macular Degeneration Trial)
# ------------------------------------------------------------------------------
armd.wide <- read.csv("armd.wide.txt", header = T, sep = "\t")
armd0 <- read.csv("armd0.txt", header = T, sep = "\t")
str(armd.wide)
str(armd0)
# ------------------------------------------------------------------------------
# Data exploration:
# ------------------------------------------------------------------------------
# monotone patterns
mnt.pat <- c("----", "---X", "--XX", "-XXX", "XXXX")
armd.wide.mnt <- subset(armd.wide, miss.pat %in% mnt.pat)
# ----------
armd.wide.mnt1 <- within(armd.wide.mnt, {
miss.pat <- factor(miss.pat, levels = mnt.pat)
})
levels(armd.wide.mnt1$miss.pat)
# ----------
with(armd.wide.mnt1, {
fl  <- list(treat.f, miss.pat)
tapply(subject, fl, FUN = function(x) length(x[!is.na(x)]))
})
library(lattice)
my.lowerPanel <- function(x, y, subscripts, ...){
panel.grid(h = -1, v = -1)
panel.xyplot(x, y, ...)
}
my.upperPanel <-  ## pairwise.complete.obs
function(x, y, subscripts, ...){
panel.xyplot(x, y, type = "n", ...)
corx <- round(cor(x, y, use = "complete.obs"), 2)
abs.corx <- abs(corx)
cex.value <- 3
ltext(50,50, corx, cex = abs.corx* cex.value)
}
mySuperPanel <- function(z, subscripts, panel.subscripts,...){
panel.pairs(z, subscripts = subscripts,
panel.subscripts = panel.subscripts,
as.matrix = TRUE,
upper.panel = "my.upperPanel",
lower.panel = "my.lowerPanel",
prepanel.limits = function(z) return(c(1, 90))
)}
splom.form <- formula( ~cbind(vis0, vis4, vis12, vis24, vis52))
armd.wide.tmp <- subset(armd.wide, miss.pat == "----",
select = c(visual0, visual4, visual12, visual24, visual52))
names(armd.wide.tmp) <- c("vis0", "vis4","vis12","vis24","vis52") # Short names
splom.object <- splom(splom. form,
data = armd.wide.tmp,
par.settings = list(fontsize = list(points = 4), axis.text = list(cex = 0.9)),
as.matrix = TRUE,
xlab = "",
superpanel = mySuperPanel
)
splom.form <- formula( ~cbind(vis0, vis4, vis12, vis24, vis52))
armd.wide.tmp <- subset(armd.wide, miss.pat == "----",
select = c(visual0, visual4, visual12, visual24, visual52))
names(armd.wide.tmp) <- c("vis0", "vis4","vis12","vis24","vis52")
splom.object <- splom(splom. form,
data = armd.wide.tmp,
par.settings = list(fontsize = list(points = 4), axis.text = list(cex = 0.9)),
as.matrix = TRUE,
xlab = "",
superpanel = mySuperPanel
)
splom.object <- splom(splom.
form,
data = armd.wide.tmp,
par.settings = list(fontsize = list(points = 4), axis.text = list(cex = 0.9)),
as.matrix = TRUE,
xlab = "",
superpanel = mySuperPanel
)
splom.object <- splom(splom,
form,
data = armd.wide.tmp,
par.settings = list(fontsize = list(points = 4), axis.text = list(cex = 0.9)),
as.matrix = TRUE,
xlab = "",
superpanel = mySuperPanel
)
# monotone patterns
mnt.pat <- c("----", "---X", "--XX", "-XXX", "XXXX")
armd.wide.mnt <- subset(armd.wide, miss.pat %in% mnt.pat)
# ----------
armd.wide.mnt1 <- within(armd.wide.mnt, {
miss.pat <- factor(miss.pat, levels = mnt.pat)
})
levels(armd.wide.mnt1$miss.pat)
# ----------
with(armd.wide.mnt1, {
fl  <- list(treat.f, miss.pat)
tapply(subject, fl, FUN = function(x) length(x[!is.na(x)]))
})
# ----------
library(lattice)
my.lowerPanel <- function(x, y, subscripts, ...){
panel.grid(h = -1, v = -1)
panel.xyplot(x, y, ...)
}
my.upperPanel <- function(x, y, subscripts, ...){
panel.xyplot(x, y, type = "n", ...)
corx <- round(cor(x, y, use = "complete.obs"), 2)
abs.corx <- abs(corx)
cex.value <- 3
ltext(50,50, corx, cex = abs.corx* cex.value)
}
mySuperPanel <- function(z, subscripts, panel.subscripts,...){
panel.pairs(z, subscripts = subscripts,
panel.subscripts = panel.subscripts,
as.matrix = TRUE,
upper.panel = "my.upperPanel",
lower.panel = "my.lowerPanel",
prepanel.limits = function(z) return(c(1, 90))
)}
splom.form <- formula( ~cbind(vis0, vis4, vis12, vis24, vis52))
armd.wide.tmp <- subset(armd.wide, miss.pat == "----",
select = c(visual0, visual4, visual12, visual24, visual52))
names(armd.wide.tmp) <- c("vis0", "vis4","vis12","vis24","vis52")
splom.object <- splom(splom,
form,
data = armd.wide.tmp,
par.settings = list(fontsize = list(points = 4), axis.text = list(cex = 0.9)),
as.matrix = TRUE,
xlab = "",
superpanel = mySuperPanel
)
splom.object <- splom(splom.form,
data = armd.wide.tmp,
par.settings = list(fontsize = list(points = 4), axis.text = list(cex = 0.9)),
as.matrix = TRUE,
xlab = "",
superpanel = mySuperPanel
)
print(splom.object)
visual.x <- subset(armd.wide, select = c(visual0:visual52))
# var-cov matrix
(varx <- var(visual.x, use = "complete.obs")) # Var-cov mtx
# correlation matrix
print(cor(visual.x, use = "complete.obs"),  digits = 2)
# var-cov diagnal elements
diag(varx)
# corr matrix (alternative way)
cov2cor(varx)
rm(list=ls())
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\z_for_demo_uncompleted\\hurricanes")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  Hurricanes
#   - In 2014, a paper was published that was entitled "Female hurricanes are deadlier than male hurricanes".
#     As the title suggests, the paper claimed that hurricanes with female names have caused greater loss of life, and the explanation
#     given is that people unconsciously rate female hurricanes as less dangerous and so are less likely to evacuate.
#   - Statisticians severely criticized the paper after publication.
#     Here consider the hypothesis that hurricanes with female names are deadlier.
#   - Variables
#        - damage_norm:  Normlized estimate of damage in dollars
#        - min_pressure:  Minimum pressure, a measure of storm strength, low is stronger
# ------------------------------------------------------------------------------
# data("Hurricanes", package = "rethinking")
data <- read.csv(file = "Hurricanes.txt", header = T, sep = "\t")
dim(data)
str(data)
car::some(data)
table(data$year)
dim(data)
library(lattice)
Mydotplot <- function(DataSelected){
P <- dotplot(as.matrix(as.matrix(DataSelected)), groups=FALSE,
strip = strip.custom(bg = 'white', par.strip.text = list(cex = 1.2)),
scales = list(x = list(relation = "free", draw = TRUE), y = list(relation = "free", draw = FALSE)),
col=1, cex  = 0.5, pch = 16,
xlab = list(label = "Value of the variable", cex = 1.5),
ylab = list(label = "Order of the data from text file", cex = 1.5))
print(P)
}
# ----------
graphics.off()
MyVar1 <- colnames(data)
Mydotplot(as.matrix(data[,MyVar1]))
summary(data)
# ----------
psych::describe(data)
# ----------
car::densityPlot(data$deaths)
car::densityPlot(data$damage_norm)
# ----------
table(data$year)
MyVar <- c("min_pressure", "damage_norm", "femininity", "deaths")
psych::pairs.panels(data[,MyVar], stars = TRUE)
psych::pairs.panels(data[,MyVar], method = "spearman", stars = TRUE)
library(corrplot)
MyVar <- c("min_pressure", "damage_norm", "femininity", "deaths")
cor_mat <- cor(data[,MyVar], method = "spearman")
corrplot(cor_mat, hclust.method = "ward.D2", addrect = TRUE)
library(car)
formula <- ~ min_pressure + log(damage_norm) + femininity + log(deaths + 0.0001)
scatterplotMatrix(formula, data = data,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
# ----------
formula <- ~ min_pressure + log(damage_norm) + femininity + log(deaths + 0.0001) | female
scatterplotMatrix(formula, data = data,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = c(gray(0.8), "black"), pch = 1:2)
mod_l <- lm(deaths ~ min_pressure + damage_norm + femininity, data = data)
summary(mod_l)
# ----------
par(mfrow = c(2,2))
plot(mod_l)
# ----------
car::residualPlots(mod_l)
summary(mod_l)
car::residualPlots(mod_l)
mod_l <- lm(deaths ~ min_pressure + female + damage_norm + femininity, data = data)
summary(mod_l)
mod_l <- lm(deaths ~ min_pressure * female + damage_norm + femininity, data = data)
summary(mod_l)
mod_l <- lm(deaths ~ min_pressure + female + damage_norm + female * min_pressure, data = data)
summary(mod_l)
mod_l <- lm(deaths ~ min_pressure + female + damage_norm + female * min_pressure + damage_norm * female, data = data)
summary(mod_l)
summary(data)
hist(data$deaths)
mod_l <- lm(log(deaths) ~ min_pressure + female + damage_norm + female * min_pressure, data = data)
summary(mod_l)
mod_l <- lm(deaths ~ min_pressure + female + damage_norm + female * min_pressure + category, data = data)
summary(mod_l)
boxplot(log(deaths + 0.001) ~ female, data = data)
boxplot(log(min_pressure + 0.001) ~ female, data = data)
boxplot(log(damage_norm + 0.001) ~ female, data = data)
mod_l <- lm(I(deaths^0.1) ~ min_pressure + I(damage_norm^0.1) + femininity, data = data)
summary(mod_l)
boxplot(log(deaths + 0.001) ~ female | as.factor(cateogry), data = data)
boxplot(log(deaths + 0.001) ~ female | as.factor(category), data = data)
boxplot(log(deaths + 0.001) ~ female + as.factor(category), data = data)
boxplot(log(deaths + 0.001) ~ factor(category) + female, data = data)
boxplot(log(deaths + 0.001) ~ factor(category), data = data)
boxplot(log(deaths + 0.001) ~ factor(category) + female, data = data)
boxplot(log(deaths + 0.001) ~ female + factor(category), data = data)
library(exactRankTests)
wilcox.test(log(deaths + 0.001) ~ female, alternative = c("two.sided"), correct = TRUE, data = data)
boxplot(log(deaths + 0.001) ~ female, data = data)
wilcox.test(log(min_pressure + 0.001) ~ female, alternative = c("two.sided"), correct = TRUE, data = data)
wilcox.test(log(damage_norm + 0.001) ~ female, alternative = c("two.sided"), correct = TRUE, data = data)
split(data$deaths, f = factor(data$category))
d_list <- split(data$deaths, f = factor(data$category))
kruskal.test(x = d_list)
boxplot(log(deaths + 0.001) ~ factor(category), data = data)
( output1 <- TukeyHSD(aov(deaths ~ factor(category), data = data)) )
plot(output1)
( output1 <- TukeyHSD(aov(log(deaths + 0.001) ~ factor(category), data = data)) )
plot(output1)
par(mfrow = c(1,1))
plot(output1)
boxplot(log(deaths + 0.001) ~ factor(category), data = data)
car::densityPlot( ~ damage_norm, data = data)
# transforming for symmetry  --> log transformation is good
car::symbox(~ damage_norm, data = data)
# check Box-Cox power family transformation
# Rounded Pwr is the first value among {1, 0, -1, 0.5, 0.33, -0.5, -0.33, 2, -2} that is included in the confidence interval for lambda
# The test for the log transformation has a very large p-value, indicating that the log transformation is consistent with the data,
# while the tiny p-value for lambda = 1 indicates that leaving "body" untransformed is inconsistent with the goal of making the variabel normally distributed.
p1 <- car::powerTransform(damage_norm ~ 1, data = data, family = "bcnPower")
summary(p1)
car::testTransform(p1, lambda = 0.1)
( output1 <- TukeyHSD(aov(I(deaths^0.1) ~ factor(category), data = data)) )
plot(output1)
formula <- ~ min_pressure + log(damage_norm) + femininity + log(deaths + 0.0001)
scatterplotMatrix(formula, data = data,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = gray(0.3), pch = 20)
formula <- ~ min_pressure + log(damage_norm) + femininity + log(deaths + 0.0001) | female
scatterplotMatrix(formula, data = data,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = c(gray(0.8), "black"), pch = 1:2)
formula <- ~ min_pressure + log(damage_norm) + femininity + log(deaths + 0.0001) | category
scatterplotMatrix(formula, data = data,
smooth = FALSE,
id = list(n = 3), ellipse = TRUE, col = c(gray(0.8), "black"), pch = 1:2)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\z_for_demo_uncompleted\\odakyu")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  odakyu
# ------------------------------------------------------------------------------
dat <- read.csv("odakyu_dat.txt", header = TRUE, sep = "\t")
str(dat)
car::some(dat)
# ----------
dat$floor <- as.factor(dat$floor)
dat$ac <- as.factor(dat$ac)
dat$closet <- as.factor(dat$closet)
dat$flooring <- as.factor(dat$flooring)
dat$balcony <- as.factor(dat$balcony)
# ----------
# total minutes
dat$min_tot <- dat$bus_min + dat$walk_min + dat$train_min
# price including train fares for 20 days per month
dat$price_tot <- dat$price + dat$train_fare * 20
# price per area
dat$price_ave <- dat$price / dat$area
dat$price_tot_ave <- dat$price_tot / dat$area
# bus
dat <- dat %>% mutate(bus_flg = ifelse(bus_min > 0, 1, 0))
dat$bus_flg <- as.factor(dat$bus_flg)
# ----------
mod0 <- lm(price ~ area + years + km + min_tot + shikirei + num_exchange + num_stations + train_fare +
bus_flg + ac + closet + flooring + balcony + floor, data = dat)
mod1 <- lm(price ~ area + years + km + min_tot + shikirei + num_exchange + num_stations +
bus_flg + ac + closet + balcony + floor +
closet : area + balcony : area, data = dat)
mod_step1
mod4 <- lm(price ~ area + years + min_tot + shikirei + num_exchange + num_stations +
bus_flg + ac + closet + balcony + floor +
closet : area + balcony : area + ac : area + floor : area +
num_exchange : area + num_exchange : num_stations + shikirei : train_fare +
num_exchange : min_tot + num_exchange + balcony : years + shikirei : area + shikirei : num_exchange, data = dat)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\z_for_demo_uncompleted\\odakyu")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\odakyu")
packages <- c("dplyr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
# ------------------------------------------------------------------------------
# data:  odakyu
# ------------------------------------------------------------------------------
dat <- read.csv("odakyu_dat.txt", header = TRUE, sep = "\t")
str(dat)
car::some(dat)
# ----------
dat$floor <- as.factor(dat$floor)
dat$ac <- as.factor(dat$ac)
dat$closet <- as.factor(dat$closet)
dat$flooring <- as.factor(dat$flooring)
dat$balcony <- as.factor(dat$balcony)
# ----------
# total minutes
dat$min_tot <- dat$bus_min + dat$walk_min + dat$train_min
# price including train fares for 20 days per month
dat$price_tot <- dat$price + dat$train_fare * 20
# price per area
dat$price_ave <- dat$price / dat$area
dat$price_tot_ave <- dat$price_tot / dat$area
# bus
dat <- dat %>% mutate(bus_flg = ifelse(bus_min > 0, 1, 0))
dat$bus_flg <- as.factor(dat$bus_flg)
# ----------
mod0 <- lm(price ~ area + years + km + min_tot + shikirei + num_exchange + num_stations + train_fare +
bus_flg + ac + closet + flooring + balcony + floor, data = dat)
mod1 <- lm(price ~ area + years + km + min_tot + shikirei + num_exchange + num_stations +
bus_flg + ac + closet + balcony + floor +
closet : area + balcony : area, data = dat)
mod_step1
mod4 <- lm(price ~ area + years + min_tot + shikirei + num_exchange + num_stations +
bus_flg + ac + closet + balcony + floor +
closet : area + balcony : area + ac : area + floor : area +
num_exchange : area + num_exchange : num_stations + shikirei : train_fare +
num_exchange : min_tot + num_exchange + balcony : years + shikirei : area + shikirei : num_exchange, data = dat)
library(MASS)
intercept_only_model <- lm(price ~ -1, data = dat)
total_model <- lm(price ~ (area + min_tot + km + years + shikirei + train_fare + num_exchange + num_stations +
bus_flg + floor + ac + closet + flooring + balcony)^2, data = dat)
mod_step1 <- stepAIC(intercept_only_model, direction = 'both', scope = formula(total_model))
summary(mod_step1)
car::Anova(mod_step1)
# ----------
mod4 <- lm(price ~ area + years + min_tot + shikirei + num_exchange + num_stations +
bus_flg + ac + closet + balcony + floor +
closet : area + balcony : area + ac : area + floor : area +
num_exchange : area + num_exchange : num_stations + shikirei : train_fare +
num_exchange : min_tot + num_exchange + balcony : years + shikirei : area + shikirei : num_exchange, data = dat)
summary(mod4)
data("chredlin", package = "faraway")
str(chredlin)
car::some(chredlin)
linmod <- lm(involact ~ race + fire + theft + age + log(income), data = chredlin)
# linmod <- lm(involact ~ race + fire + theft + age + income, data = chredlin)
summary(linmod)
car::vif(linmod)
anova(linmod)
anova(lm(involact ~ race + fire + theft + age + log(income), data = chredlin))
summary(linmod)
linmod <- lm(involact ~ race + fire + theft + age + log(income), data = chredlin)
# linmod <- lm(involact ~ race + fire + theft + age + income, data = chredlin)
# ------------------------------------------------------------------------------
# Main effect plot
# ------------------------------------------------------------------------------
library(effects)
eff <- effects::allEffects(linmod)
eff
# ----------
# plot main effets of each variable
plot(eff)
plot(predictorEffects(linmod))
( listcombo <- unlist(sapply(0:4, function(x) combn(4, x, simplify = FALSE)), recursive = FALSE) )
( predterms <- lapply(listcombo, function(x) paste(c("race", c("fire", "theft", "age", "log(income)")[x]), collapse = "+")) )
coefm <- matrix(NA, 16, 2)
# ----------
for(i in 1:16){
lmi <- lm(as.formula(paste("involact ~ ", predterms[[i]])), data = chredlin)
# "race"'s estimated coefficient and pvalue
coefm[i,] <- summary(lmi)$coef[2,c(1,4)]
}
rownames(coefm) <- predterms
colnames(coefm) <- c("beta", "pvalue")
# ----------
round(coefm, 4)
# -->
# We can see that the value of coefficient for race varies somewhat with a high value about double the low value.
# But in no case does the p-value rise above 5%.
# So although we may have some uncertainty over the magnitude of the effect, we can be sure that the significance of the effect is not sensitive
# to the choice of adjusters.
setwd("C:\\Users\\kswad\\OneDrive\\デスクトップ\\技術力強化_統計解析\\51_解析スクリプト\\00_basics\\04_regression_basics\\prestige")
# ------------------------------------------------------------------------------
# data:  Prestige
#   - Occupational prestige scores for 102 Canadian occupations in the mid-1960s
#   - including potential predictors of occupational prestige scores:
#      - average years of education of incumbents in each occupation in 1970
#      - average income of occupation
#      - percentage of women in the occupation
#      - type of occupation, a factor with levels "bc" (blue color), "prof" (professional or managerial), and "wc" (white collar)
#     The first 3 predictors are from the 1971 Canadian Census.
# ------------------------------------------------------------------------------
data <- read.csv("Prestige.txt", header = T, sep = "\t")
str(data)
car::some(data)
vx <- c(58, 99, 32, 48)
p_theory <- c(0.3, 0.5, 0.1, 0.1)
( expected <- p_theory * sum(vx) )
vx <- c(58, 99, 32, 48)
p_theory <- c(0.3, 0.5, 0.1, 0.1)
( expected <- p_theory * sum(vx) )
output1 <- chisq.test(x = vx, p = p_theory)
output2 <- chisq.test(x = vx, p = expected, rescale.p = TRUE)
output2
output1
output2$statistic
output2$p.value
help(chisq.test)
( x <- rbinom(n = 10, size = 100, prob = 0.10) )
( y <- rbinom(n = 10, size = 100, prob = 0.12) )
par(mfrow = c(2, 1))
plot(density(x))
plot(density(y))
output3 <- chisq.test(x = x, p = y, rescale.p = TRUE)
output3$statistic
output3$p.value
( x <- rbinom(n = 10, size = 100, prob = 0.10) )
pretest <- c(rep("pass", 7), rep("fail", 13))
posttest <- c(rep("pass", 6), rep("fail", 1), rep("pass", 8), rep("fail", 5))
( df <- data.frame(id = seq(1, 20, by = 1), pretest = pretest, posttest = posttest) )
head(df)
# ----------
table(pretest)
table(posttest)
( tab <- t(matrix(c(table(pretest), table(posttest)), nrow = 2)) )
row.names(tab) <- c("pretest", "posttest")
colnames(tab) <- c("fail", "pass")
tab
( df2 <- data.frame(tab) %>% mutate(all = pass + fail, pass_ratio = round(pass / (pass + fail), 3)) )
head(df2)
x <- c(7, 14)
# Number of trials --> all objective for pretest and posttest
n <- c(20, 20)
( output1 <- prop.test(x = x, n = n, alternative = c("two.sided")) )
output1$p.value
